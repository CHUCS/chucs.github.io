<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHUCSIE</title>
  
  <subtitle>解題報告</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chucs.github.io/"/>
  <updated>2020-07-26T11:58:03.942Z</updated>
  <id>https://chucs.github.io/</id>
  
  <author>
    <name>CHUCSIE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AOJ ALDS1_7_B</title>
    <link href="https://chucs.github.io/ALDS1-7-B-Binary-Tree/"/>
    <id>https://chucs.github.io/ALDS1-7-B-Binary-Tree/</id>
    <published>2020-07-18T07:53:01.000Z</published>
    <updated>2020-07-26T11:58:03.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-7-B-Binary-Tree"><a href="#AOJ-ALDS1-7-B-Binary-Tree" class="headerlink" title="AOJ ALDS1_7_B - Binary Tree"></a>AOJ ALDS1_7_B - Binary Tree</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_7_B" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>有根的二叉樹是具有根節點的樹，其中每個節點最多有兩個子節點。</p><p>您的任務是編寫一個程序，該程序讀取有根的二叉樹T並為T的每個節點u打印以下信息：<br>node ID of u (節點編號)<br>parent of u (節點父親)<br>sibling of u (節點兄弟)<br>the number of children of u (節點小孩數目)<br>depth of u (節點深度)<br>height of u (節點高)<br>node type (root, internal node or leaf) (節點狀態)</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><h5 id="sibling-兄弟"><a href="#sibling-兄弟" class="headerlink" title="sibling 兄弟"></a>sibling 兄弟</h5><p>如果左節點跟右節點都不為-1就代表有兄弟。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(tree[id].left !&#x3D; -1 &amp;&amp; tree[id].right !&#x3D; -1) &#123;</span><br><span class="line">    tree[left].sibling &#x3D; right;</span><br><span class="line">    tree[right].sibling &#x3D; left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="degree-＆-children-parent-子節點個數與子節點父親"><a href="#degree-＆-children-parent-子節點個數與子節點父親" class="headerlink" title="degree ＆ children parent 子節點個數與子節點父親"></a>degree ＆ children parent 子節點個數與子節點父親</h5><p>計算子節點數並順便將子節點的父親標記。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if(left !&#x3D; -1) &#123;</span><br><span class="line">    tree[id].degree++;</span><br><span class="line">    tree[left].parent &#x3D; id;</span><br><span class="line">&#125;</span><br><span class="line">if(right !&#x3D; -1) &#123;</span><br><span class="line">    tree[id].degree++;</span><br><span class="line">    tree[right].parent &#x3D; id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="height-節點高度"><a href="#height-節點高度" class="headerlink" title="height 節點高度"></a>height 節點高度</h5><p>一直往下找然後比較最大的深度回傳。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int dfs(Node *tree, int key) </span><br><span class="line">&#123; </span><br><span class="line">    if (tree[key].left &#x3D;&#x3D; -1 &amp;&amp; tree[key].right &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (tree[key].left &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        return dfs(tree, tree[key].right) + 1; </span><br><span class="line">    &#125;</span><br><span class="line">    if (tree[key].right &#x3D;&#x3D; -1) &#123;</span><br><span class="line">        return dfs(tree, tree[key].left) + 1; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return max(dfs(tree, tree[key].left), dfs(tree, tree[key].right)) + 1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="depth-深度"><a href="#depth-深度" class="headerlink" title="depth 深度"></a>depth 深度</h5><p>從根往下並沿路標記深度，深度則是由父親的深度加一就可以得到自己的深度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void depth(Node *tree, int key)&#123;</span><br><span class="line">    if(tree[key].parent !&#x3D; -1)&#123; </span><br><span class="line">        tree[key].depth &#x3D; tree[tree[key].parent].depth + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    if(tree[key].left !&#x3D; -1)&#123;</span><br><span class="line">        depth(tree, tree[key].left);</span><br><span class="line">    &#125;</span><br><span class="line">    if(tree[key].right !&#x3D; -1)&#123;</span><br><span class="line">        </span><br><span class="line">        depth(tree, tree[key].right);</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/400e539d787926ef7fc0ef89f881f4a5.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-7-B-Binary-Tree&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-7-B-Binary-Tree&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_7_B - Binary Tree&quot;&gt;&lt;/a&gt;AOJ ALDS1_7_B - Binary Tree&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_7_B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;有根的二叉樹是具有根節點的樹，其中每個節點最多有兩個子節點。&lt;/p&gt;
&lt;p&gt;您的任務是編寫一個程序，該程序讀取有根的二叉樹T並為T的每個節點u打印以下信息：&lt;br&gt;node ID of u (節點編號)&lt;br&gt;parent of u (節點父親)&lt;br&gt;sibling of u (節點兄弟)&lt;br&gt;the number of children of u (節點小孩數目)&lt;br&gt;depth of u (節點深度)&lt;br&gt;height of u (節點高)&lt;br&gt;node type (root, internal node or leaf) (節點狀態)&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_7_A</title>
    <link href="https://chucs.github.io/ALDS1-7-A-Rooted-Trees/"/>
    <id>https://chucs.github.io/ALDS1-7-A-Rooted-Trees/</id>
    <published>2020-07-15T08:05:42.000Z</published>
    <updated>2020-07-18T02:35:47.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-7-A-Rooted-Trees"><a href="#AOJ-ALDS1-7-A-Rooted-Trees" class="headerlink" title="AOJ ALDS1_7_A - Rooted Trees"></a>AOJ ALDS1_7_A - Rooted Trees</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_7_A" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>Rooted Trees是連接的，無環的，無向的圖。Rooted Trees是一種自由樹，其中一個頂點與另一個頂點是不同的。Rooted Trees的頂點稱為“節點”。<br>你的任務是編寫一個程序，為給定的根樹T的每個節點u報告以下信息：<br>node ID of u (節點編號)<br>parent of u (節點父親)<br>depth of u (節點深度)<br>node type (root, internal node or leaf)<br>a list of chidlren of u (列出節點小孩)</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>先創立一個結構parent、depth、type和internalNode方便紀錄我們的資料，接下來我們輸入每筆資料的時候就把自己節點的父親深度加一，就可以得到自己節點的深度，然後在子節點裡面，我們也做一樣的事情然後順便紀錄子節點的父親。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/c3dfdc3026767577257e91a5902bae1d.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-7-A-Rooted-Trees&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-7-A-Rooted-Trees&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_7_A - Rooted Trees&quot;&gt;&lt;/a&gt;AOJ ALDS1_7_A - Rooted Trees&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_7_A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;Rooted Trees是連接的，無環的，無向的圖。Rooted Trees是一種自由樹，其中一個頂點與另一個頂點是不同的。Rooted Trees的頂點稱為“節點”。&lt;br&gt;你的任務是編寫一個程序，為給定的根樹T的每個節點u報告以下信息：&lt;br&gt;node ID of u (節點編號)&lt;br&gt;parent of u (節點父親)&lt;br&gt;depth of u (節點深度)&lt;br&gt;node type (root, internal node or leaf)&lt;br&gt;a list of chidlren of u (列出節點小孩)&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_6_C</title>
    <link href="https://chucs.github.io/ALDS1-6-C-Quick-Sort/"/>
    <id>https://chucs.github.io/ALDS1-6-C-Quick-Sort/</id>
    <published>2020-07-15T06:36:48.000Z</published>
    <updated>2020-07-18T02:35:47.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-6-C-Quick-Sort"><a href="#AOJ-ALDS1-6-C-Quick-Sort" class="headerlink" title="AOJ ALDS1_6_C - Quick Sort"></a>AOJ ALDS1_6_C - Quick Sort</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_6_C" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>快速排序有三個步驟：<br>1.挑選基準值：從數列中挑出一個元素，稱為「基準」（pivot)。</p><p>2.分割：重新排序數列，所有比基準值小的元素擺放在基準前面，所有比基準值大的元素擺在基準後面（與基準值相等的數可以到任何一邊）。在這個分割結束之後，對基準值的排序就已經完成。</p><p>3.遞迴排序子序列：遞迴地將小於基準值元素的子序列和大於基準值元素的子序列排序。</p><p>完成排序後檢查出現順序是否依照順序，例如先輸入”D 1”、”H 1”，輸出時若為”D 1”、”H 1”就輸出”Stable”，否則輸出”Not stable”。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>按照上面快速排序的步驟編寫。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/b1de01e5346182490fa59fec396ecd2c.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-6-C-Quick-Sort&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-6-C-Quick-Sort&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_6_C - Quick Sort&quot;&gt;&lt;/a&gt;AOJ ALDS1_6_C - Quick Sort&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_6_C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;快速排序有三個步驟：&lt;br&gt;1.挑選基準值：從數列中挑出一個元素，稱為「基準」（pivot)。&lt;/p&gt;
&lt;p&gt;2.分割：重新排序數列，所有比基準值小的元素擺放在基準前面，所有比基準值大的元素擺在基準後面（與基準值相等的數可以到任何一邊）。在這個分割結束之後，對基準值的排序就已經完成。&lt;/p&gt;
&lt;p&gt;3.遞迴排序子序列：遞迴地將小於基準值元素的子序列和大於基準值元素的子序列排序。&lt;/p&gt;
&lt;p&gt;完成排序後檢查出現順序是否依照順序，例如先輸入”D 1”、”H 1”，輸出時若為”D 1”、”H 1”就輸出”Stable”，否則輸出”Not stable”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_6_B</title>
    <link href="https://chucs.github.io/ALDS1-6-B-Partition/"/>
    <id>https://chucs.github.io/ALDS1-6-B-Partition/</id>
    <published>2020-07-15T06:26:38.000Z</published>
    <updated>2020-07-18T02:35:47.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-6-B-Partition"><a href="#AOJ-ALDS1-6-B-Partition" class="headerlink" title="AOJ ALDS1_6_B - Partition"></a>AOJ ALDS1_6_B - Partition</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_6_B" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>快速排序有三個步驟：<br>1.挑選基準值：從數列中挑出一個元素，稱為「基準」（pivot）。</p><p>2.分割：重新排序數列，所有比基準值小的元素擺放在基準前面，所有比基準值大的元素擺在基準後面（與基準值相等的數可以到任何一邊）。在這個分割結束之後，對基準值的排序就已經完成。</p><p>3.遞迴排序子序列：遞迴地將小於基準值元素的子序列和大於基準值元素的子序列排序。</p><p>而這題要做的就是分割這個動作。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>如果(a[j] &lt;= x)我們就交換，最後我們將最後一個切割點輸出。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/2b61bf149936044aab2d398c8496b1b3.js"></script>    ]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-6-B-Partition&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-6-B-Partition&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_6_B - Partition&quot;&gt;&lt;/a&gt;AOJ ALDS1_6_B - Partition&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_6_B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;快速排序有三個步驟：&lt;br&gt;1.挑選基準值：從數列中挑出一個元素，稱為「基準」（pivot）。&lt;/p&gt;
&lt;p&gt;2.分割：重新排序數列，所有比基準值小的元素擺放在基準前面，所有比基準值大的元素擺在基準後面（與基準值相等的數可以到任何一邊）。在這個分割結束之後，對基準值的排序就已經完成。&lt;/p&gt;
&lt;p&gt;3.遞迴排序子序列：遞迴地將小於基準值元素的子序列和大於基準值元素的子序列排序。&lt;/p&gt;
&lt;p&gt;而這題要做的就是分割這個動作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_6_A</title>
    <link href="https://chucs.github.io/ALDS1-6-A-Counting-Sort/"/>
    <id>https://chucs.github.io/ALDS1-6-A-Counting-Sort/</id>
    <published>2020-07-15T05:33:29.000Z</published>
    <updated>2020-07-18T02:35:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-6-A-Counting-Sort"><a href="#AOJ-ALDS1-6-A-Counting-Sort" class="headerlink" title="AOJ ALDS1_6_A - Counting Sort"></a>AOJ ALDS1_6_A - Counting Sort</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_6_A" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>計數排序可用於對數組中的元素進行排序，用一個陣列來計算元素有幾個，而他的index就是原本的數字裡面存的是出現次數。請利用計數排序排序下列數列。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>將每個數字都放進Ｃ陣列內計數(c[a[i]]++)，處理完後從0跑到K並根據C陣列內的計數，將所有的數字輸出一遍。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/245397223969f64944326fb98f0b1e80.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-6-A-Counting-Sort&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-6-A-Counting-Sort&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_6_A - Counting Sort&quot;&gt;&lt;/a&gt;AOJ ALDS1_6_A - Counting Sort&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_6_A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;計數排序可用於對數組中的元素進行排序，用一個陣列來計算元素有幾個，而他的index就是原本的數字裡面存的是出現次數。請利用計數排序排序下列數列。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_5_B</title>
    <link href="https://chucs.github.io/ALDS1-5-B-Merge-Sort/"/>
    <id>https://chucs.github.io/ALDS1-5-B-Merge-Sort/</id>
    <published>2020-07-15T04:39:23.000Z</published>
    <updated>2020-07-18T02:35:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-5-B-Merge-Sort"><a href="#AOJ-ALDS1-5-B-Merge-Sort" class="headerlink" title="AOJ ALDS1_5_B - Merge Sort"></a>AOJ ALDS1_5_B - Merge Sort</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_5_B" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>給你N個整數序列S創建一個程序，根據上面的虛擬碼通過合併排序由小到大進行排序。另外，請報告合併中的比較總數。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>先拆開然後檢查左邊和右邊誰大誰小，小的放左邊大的放右邊合併，重複這個動作到結束。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/86ace3aedb574bee48d1a7869cca847c.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-5-B-Merge-Sort&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-5-B-Merge-Sort&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_5_B - Merge Sort&quot;&gt;&lt;/a&gt;AOJ ALDS1_5_B - Merge Sort&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_5_B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;給你N個整數序列S創建一個程序，根據上面的虛擬碼通過合併排序由小到大進行排序。另外，請報告合併中的比較總數。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_5_A</title>
    <link href="https://chucs.github.io/ALDS1-5-A-Exhaustive-Search/"/>
    <id>https://chucs.github.io/ALDS1-5-A-Exhaustive-Search/</id>
    <published>2020-07-14T08:13:31.000Z</published>
    <updated>2020-07-18T02:35:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-5-A-Exhaustive-Search"><a href="#AOJ-ALDS1-5-A-Exhaustive-Search" class="headerlink" title="AOJ ALDS1_5_A - Exhaustive Search"></a>AOJ ALDS1_5_A - Exhaustive Search</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_5_A" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>給N個整數數列A，Q個整數數列M，判斷A任意數字加起來是否等於Mi，如果有輸出”yes”，否則輸出”no”。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>直接建一張查詢表把所有的可能加一遍並修改，之後直接查表。<br>累加後遞迴然後把位子移動到下一個數字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build(sum+a[index], index+1, n);</span><br></pre></td></tr></table></figure><p>把自己也改變。<br>build(sum, index+1, n);</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/ca85b1798c3535457231e0d3a4c645e9.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-5-A-Exhaustive-Search&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-5-A-Exhaustive-Search&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_5_A - Exhaustive Search&quot;&gt;&lt;/a&gt;AOJ ALDS1_5_A - Exhaustive Search&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_5_A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;給N個整數數列A，Q個整數數列M，判斷A任意數字加起來是否等於Mi，如果有輸出”yes”，否則輸出”no”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_4_C</title>
    <link href="https://chucs.github.io/ALDS1-4-C-Dictionary/"/>
    <id>https://chucs.github.io/ALDS1-4-C-Dictionary/</id>
    <published>2020-07-14T06:51:04.000Z</published>
    <updated>2020-07-18T02:35:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-4-C-Dictionary"><a href="#AOJ-ALDS1-4-C-Dictionary" class="headerlink" title="AOJ ALDS1_4_C - Dictionary"></a>AOJ ALDS1_4_C - Dictionary</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_4_C" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>寫一個具備以下功能的字典程式:<br>insert str: 插入一個字串到字典裡。<br>find str: 找尋字串如果找到輸出”yes”，否則”no”。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>利用C++的map函式來加入，使用find的功能來查詢，如果沒找會輸出0，所以我們就可以放在判斷式裡面做判斷。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/0e68ebaec599b3a3b31c9e84fbac8840.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-4-C-Dictionary&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-4-C-Dictionary&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_4_C - Dictionary&quot;&gt;&lt;/a&gt;AOJ ALDS1_4_C - Dictionary&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_4_C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;寫一個具備以下功能的字典程式:&lt;br&gt;insert str: 插入一個字串到字典裡。&lt;br&gt;find str: 找尋字串如果找到輸出”yes”，否則”no”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_4_B</title>
    <link href="https://chucs.github.io/ALDS1-4-B-Binary-Search/"/>
    <id>https://chucs.github.io/ALDS1-4-B-Binary-Search/</id>
    <published>2020-07-14T05:24:03.000Z</published>
    <updated>2020-07-18T02:35:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-4-B-Binary-Search"><a href="#AOJ-ALDS1-4-B-Binary-Search" class="headerlink" title="AOJ ALDS1_4_B - Binary Search"></a>AOJ ALDS1_4_B - Binary Search</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_4_B" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>給N個整數數列S，還有q個整數數列T，請輸出T在S裡面有找到幾個。利用二分搜索來尋找。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>宣告三個變數分別紀錄左邊、右邊和中間位置，每次判斷中間那個數字是否等於要找的數字，如果沒有則判斷大於小於以利切割，如果大於的話就把r換成中間的位置，小於則把l換成中間的位置。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/b7e47a957066b3bb5888030be0aac43f.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-4-B-Binary-Search&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-4-B-Binary-Search&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_4_B - Binary Search&quot;&gt;&lt;/a&gt;AOJ ALDS1_4_B - Binary Search&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_4_B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;給N個整數數列S，還有q個整數數列T，請輸出T在S裡面有找到幾個。利用二分搜索來尋找。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_4_A</title>
    <link href="https://chucs.github.io/ALDS1-4-A-Linear-Search/"/>
    <id>https://chucs.github.io/ALDS1-4-A-Linear-Search/</id>
    <published>2020-07-14T04:39:48.000Z</published>
    <updated>2020-07-18T02:35:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-4-A-Linear-Search"><a href="#AOJ-ALDS1-4-A-Linear-Search" class="headerlink" title="AOJ ALDS1_4_A - Linear Search"></a>AOJ ALDS1_4_A - Linear Search</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_4_A" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>給N個整數數列S，還有q個整數數列T，請輸出T在S裡面有找到幾個。利用線性搜索來尋找。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>逐一檢查，如果相等count加一然後斷開避免重複加到。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/be27322df4e6cf323429cc22b66ebcd3.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-4-A-Linear-Search&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-4-A-Linear-Search&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_4_A - Linear Search&quot;&gt;&lt;/a&gt;AOJ ALDS1_4_A - Linear Search&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_4_A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;給N個整數數列S，還有q個整數數列T，請輸出T在S裡面有找到幾個。利用線性搜索來尋找。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI Stack</title>
    <link href="https://chucs.github.io/swiftui-stack/"/>
    <id>https://chucs.github.io/swiftui-stack/</id>
    <published>2020-07-14T04:04:13.000Z</published>
    <updated>2020-07-18T02:35:47.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SwiftUI-Stack-堆疊方式"><a href="#SwiftUI-Stack-堆疊方式" class="headerlink" title="SwiftUI Stack 堆疊方式"></a>SwiftUI Stack 堆疊方式</h1><p>在SwiftUI中有三種堆疊分別為VStack、ZStack和HStack，這些堆疊可以讓顯示的東西以不同的方式呈現。</p><a id="more"></a><h2 id="VStack-縱向堆疊"><a href="#VStack-縱向堆疊" class="headerlink" title="VStack 縱向堆疊"></a>VStack 縱向堆疊</h2><p>VStack可以使文字逐一縱向的堆疊。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VStack() &#123;</span><br><span class="line">    Text(&quot;Hello&quot;)</span><br><span class="line">    Text(&quot;SwiftUI&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顯示的結果為：<br>Hello<br>SwiftUI</p><h2 id="HStack-橫向堆疊"><a href="#HStack-橫向堆疊" class="headerlink" title="HStack 橫向堆疊"></a>HStack 橫向堆疊</h2><p>HStack可以使文字逐一橫向的堆疊。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HStack() &#123;</span><br><span class="line">    Text(&quot;Hello&quot;)</span><br><span class="line">    Text(&quot;SwiftUI&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顯示的結果為：<br>Hello SwiftUI</p><h2 id="ZStack-重疊"><a href="#ZStack-重疊" class="headerlink" title="ZStack 重疊"></a>ZStack 重疊</h2><p>HStack可以使文字重疊。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZStack() &#123;</span><br><span class="line">    Text(&quot;Hello&quot;)</span><br><span class="line">    Text(&quot;SwiftUI !!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="alignment與spacing-校準與間距"><a href="#alignment與spacing-校準與間距" class="headerlink" title="alignment與spacing 校準與間距"></a>alignment與spacing 校準與間距</h2><p>alignment可以控制校準的位置，你可以把VStack內的東西靠左靠右等等等…。spacing可以控制每個區塊距離。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VStack(alignment: .leading, spacing: 50) &#123;</span><br><span class="line">    Text(&quot;Hello&quot;)</span><br><span class="line">    Text(&quot;SwiftUI !!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多個Stack"><a href="#多個Stack" class="headerlink" title="多個Stack"></a>多個Stack</h2><p>你可以使用多個堆疊來表現不同的樣式，例如下面代碼。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HStack()&#123;</span><br><span class="line">    VStack() &#123;</span><br><span class="line">        Text(&quot;1. Hello&quot;)</span><br><span class="line">        Text(&quot;SwiftUI&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    VStack() &#123;</span><br><span class="line">        Text(&quot;2. Hello&quot;)</span><br><span class="line">        Text(&quot;SwiftUI&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SwiftUI-Stack-堆疊方式&quot;&gt;&lt;a href=&quot;#SwiftUI-Stack-堆疊方式&quot; class=&quot;headerlink&quot; title=&quot;SwiftUI Stack 堆疊方式&quot;&gt;&lt;/a&gt;SwiftUI Stack 堆疊方式&lt;/h1&gt;&lt;p&gt;在SwiftUI中有三種堆疊分別為VStack、ZStack和HStack，這些堆疊可以讓顯示的東西以不同的方式呈現。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SwiftUI tutorials" scheme="https://chucs.github.io/categories/SwiftUI-tutorials/"/>
    
    
      <category term="swiftui" scheme="https://chucs.github.io/tags/swiftui/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI Color</title>
    <link href="https://chucs.github.io/swiftui-color/"/>
    <id>https://chucs.github.io/swiftui-color/</id>
    <published>2020-07-14T03:44:25.000Z</published>
    <updated>2020-07-18T02:35:47.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SwiftUI-Hex-Color-十六進至顏色轉換"><a href="#SwiftUI-Hex-Color-十六進至顏色轉換" class="headerlink" title="SwiftUI Hex Color 十六進至顏色轉換"></a>SwiftUI Hex Color 十六進至顏色轉換</h1><p>如果想要使用hex的色碼的話可以先定義好轉換方式，之後只需要設定Color裡面的hex就可以轉換成想要的顏色。當然你必須先定義好你的函式。</p><a id="more"></a><p>首先你需要在extension定義好色碼轉換方法，例如下面的代碼。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import SwiftUI</span><br><span class="line"></span><br><span class="line">extension Color &#123;</span><br><span class="line">    static let cloloABC &#x3D; Color(hex: &quot;#FFFFFF&quot;, alpha: 0.5)</span><br><span class="line"></span><br><span class="line">    init(hex: String, alpha: CGFloat &#x3D; 1.0) &#123;</span><br><span class="line">        var hex &#x3D; hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)</span><br><span class="line">        if hex.hasPrefix(&quot;#&quot;) &#123;</span><br><span class="line">            hex &#x3D; String(hex.dropFirst())</span><br><span class="line">        &#125;</span><br><span class="line">        assert(hex.count &#x3D;&#x3D; 3 || hex.count &#x3D;&#x3D; 6 || hex.count &#x3D;&#x3D; 8, &quot;Invalid hex code used. hex count is #(3, 6, 8).&quot;)</span><br><span class="line">        var int: UInt64 &#x3D; 0</span><br><span class="line">        Scanner(string: hex).scanHexInt64(&amp;int)</span><br><span class="line">        let r, g, b: UInt64</span><br><span class="line">        switch hex.count &#123;</span><br><span class="line">        case 3: &#x2F;&#x2F; RGB (12-bit)</span><br><span class="line">            (r, g, b) &#x3D; ((int &gt;&gt; 8) * 17, (int &gt;&gt; 4 &amp; 0xF) * 17, (int &amp; 0xF) * 17)</span><br><span class="line">        case 6: &#x2F;&#x2F; RGB (24-bit)</span><br><span class="line">            (r, g, b) &#x3D; (int &gt;&gt; 16, int &gt;&gt; 8 &amp; 0xFF, int &amp; 0xFF)</span><br><span class="line">        case 8: &#x2F;&#x2F; ARGB (32-bit)</span><br><span class="line">            (r, g, b) &#x3D; (int &gt;&gt; 16 &amp; 0xFF, int &gt;&gt; 8 &amp; 0xFF, int &amp; 0xFF)</span><br><span class="line">        default:</span><br><span class="line">            (r, g, b) &#x3D; (1, 1, 0)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        self.init(</span><br><span class="line">            .sRGB,</span><br><span class="line">            red: Double(r) &#x2F; 255,</span><br><span class="line">            green: Double(g) &#x2F; 255,</span><br><span class="line">            blue:  Double(b) &#x2F; 255,</span><br><span class="line">            opacity: Double(alpha)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定義完成後，你可以在ContentView裡面直接使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Text(&quot;Hello, World!&quot;)</span><br><span class="line">    .foregroundColor(Color.init(hex: &quot;#FFFFFF&quot;, alpha: 1.0))</span><br></pre></td></tr></table></figure><p>也可以定義在extension內這樣就可以直接使用而且不必重新設定色碼。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Text(&quot;Hello, World!&quot;)</span><br><span class="line">    .foregroundColor(Color.cloloABC)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SwiftUI-Hex-Color-十六進至顏色轉換&quot;&gt;&lt;a href=&quot;#SwiftUI-Hex-Color-十六進至顏色轉換&quot; class=&quot;headerlink&quot; title=&quot;SwiftUI Hex Color 十六進至顏色轉換&quot;&gt;&lt;/a&gt;SwiftUI Hex Color 十六進至顏色轉換&lt;/h1&gt;&lt;p&gt;如果想要使用hex的色碼的話可以先定義好轉換方式，之後只需要設定Color裡面的hex就可以轉換成想要的顏色。當然你必須先定義好你的函式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SwiftUI tutorials" scheme="https://chucs.github.io/categories/SwiftUI-tutorials/"/>
    
    
      <category term="swiftui" scheme="https://chucs.github.io/tags/swiftui/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI Text</title>
    <link href="https://chucs.github.io/swiftui-text/"/>
    <id>https://chucs.github.io/swiftui-text/</id>
    <published>2020-07-13T07:47:34.000Z</published>
    <updated>2020-07-18T02:35:47.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Text-用法"><a href="#Text-用法" class="headerlink" title="Text 用法"></a>Text 用法</h2><h3 id="顯示簡單文字"><a href="#顯示簡單文字" class="headerlink" title="顯示簡單文字"></a>顯示簡單文字</h3><p>ContentView已在中生成的範例代碼向你展示瞭如何顯示一行文字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="更改字體類型"><a href="#更改字體類型" class="headerlink" title="更改字體類型"></a>更改字體類型</h3><h4 id="fontWeight-文字類型"><a href="#fontWeight-文字類型" class="headerlink" title="fontWeight 文字類型"></a>fontWeight 文字類型</h4><p>你可以使用fontWeight來更改字體的類型，例如下面所使用的粗體字，當然字體類型有很多種像是heavy, light, medium等等等…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Text(&quot;Hello, World!&quot;)</span><br><span class="line">    .fontWeight(.bold)</span><br></pre></td></tr></table></figure><h4 id="font-字體樣式"><a href="#font-字體樣式" class="headerlink" title="font 字體樣式"></a>font 字體樣式</h4><p>字體樣式中你可以修改字體的大小, 字形和大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Text(&quot;Hello, World!&quot;)</span><br><span class="line">    .font(.title)</span><br></pre></td></tr></table></figure><p>如果想要進一步修改字體的設計你可以像這樣寫：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.font(.system(.largeTitle, design: .rounded))</span><br></pre></td></tr></table></figure><p>這樣寫字體就會被修成largeTitle的樣式而且是圓弧的。</p><p>該font修改器可以更改字體屬性。在上面的代碼中，我們指定使用標題字體類型以放大文本。</p><p>如果要使用固定大小的字體你只要在system裡面設定size就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.font(.system(size: 20))</span><br></pre></td></tr></table></figure><p>如果想更改字體的字型的話可以使用custom來更改字型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.font(.custom(&quot;Helvetica Neue&quot;, size: 25))</span><br></pre></td></tr></table></figure><p>字體名稱可以在“字體書”中找到。您可以打開Finder應用程序，然後單擊字體簿以啟動該應用程序。</p><h4 id="shadow-陰影"><a href="#shadow-陰影" class="headerlink" title="shadow 陰影"></a>shadow 陰影</h4><p>為文本增加陰影效果可以使字體更有感覺，而radius可以設定陰影的風格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.shadow(color: .black, radius: 2, x: 0, y: 15)</span><br></pre></td></tr></table></figure><h3 id="更改字體顏色"><a href="#更改字體顏色" class="headerlink" title="更改字體顏色"></a>更改字體顏色</h3><h4 id="foregroundColor-修改顏色"><a href="#foregroundColor-修改顏色" class="headerlink" title="foregroundColor 修改顏色"></a>foregroundColor 修改顏色</h4><p>您可以使用其他內置值喜歡.red，.purple等等。如果你想知道如何使用hex色碼的話可以參考<a href="https://chucs.github.io/swiftui-text/">SwiftUI Color</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Text(&quot;Hello, World!&quot;)</span><br><span class="line">    .foregroundColor(.red)</span><br></pre></td></tr></table></figure><h3 id="多個修處理多行文字飾"><a href="#多個修處理多行文字飾" class="headerlink" title="多個修處理多行文字飾"></a>多個修處理多行文字飾</h3><p>在SwiftUI裡支持多個修飾，你可以使用foregroundColor修改顏色fontWeight修改字體類型等等等…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Text(&quot;Hello, World!&quot;)</span><br><span class="line">    .fontWeight(.bold)</span><br><span class="line">    .font(.title)</span><br></pre></td></tr></table></figure><h3 id="處理多行文字"><a href="#處理多行文字" class="headerlink" title="處理多行文字"></a>處理多行文字</h3><p>Text默認情況下支持多行，因此它可以顯示文本段落，而無需使用任何其他修飾符。但你可以使用一些函式來修改文本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Text(&quot;Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!&quot;)</span><br><span class="line">    .fontWeight(.bold)</span><br><span class="line">    .font(.title)</span><br></pre></td></tr></table></figure><h4 id="multilineTextAlignment-修改文字位置"><a href="#multilineTextAlignment-修改文字位置" class="headerlink" title="multilineTextAlignment 修改文字位置"></a>multilineTextAlignment 修改文字位置</h4><p>要使文本置中對齊，請插入multilineTextAlignment修飾符並將值設置為.center如下所示，當然你也可以靠左對齊靠右對齊。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.multilineTextAlignment(.center)</span><br></pre></td></tr></table></figure><h4 id="lineLimit-行數行數限制"><a href="#lineLimit-行數行數限制" class="headerlink" title="lineLimit 行數行數限制"></a>lineLimit 行數行數限制</h4><p>你可能希望將行數限制為一定數量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.lineLimit(3)</span><br></pre></td></tr></table></figure><h3 id="設置填充和行距"><a href="#設置填充和行距" class="headerlink" title="設置填充和行距"></a>設置填充和行距</h3><h4 id="lineSpacing-行距調整"><a href="#lineSpacing-行距調整" class="headerlink" title="lineSpacing 行距調整"></a>lineSpacing 行距調整</h4><p>默認行間距足以應付大多數情況。如果要更改默認設置，可以使用lineSpacing修飾符來調整行距。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.lineSpacing(10)</span><br></pre></td></tr></table></figure><h4 id="padding-填充空間"><a href="#padding-填充空間" class="headerlink" title="padding 填充空間"></a>padding 填充空間</h4><p>如您所見，文本太靠近邊緣的左側和右側。要給它更多的空間，可以使用padding修飾符，該修飾符為文本的每一側增加一些額外的空間。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.padding()</span><br></pre></td></tr></table></figure><p>如果沒有在裡面設定數字的話就會是默認的長度。如果想要設定固定長度的話可以直接帶入數字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.padding(10)</span><br></pre></td></tr></table></figure><p>在padding修飾符中也可以設定你想要哪幾個邊做增加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.padding([.top, .leading, .trailing])</span><br></pre></td></tr></table></figure><h3 id="旋轉文字"><a href="#旋轉文字" class="headerlink" title="旋轉文字"></a>旋轉文字</h3><h4 id="rotationEffect-旋轉"><a href="#rotationEffect-旋轉" class="headerlink" title="rotationEffect 旋轉"></a>rotationEffect 旋轉</h4><p>SwiftUI框架提供了API，無論是2D還是3D都可以讓您輕鬆旋轉文本。</p><p>2D旋轉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.rotationEffect(.degrees(20), anchor: UnitPoint(x: 0, y: 0))</span><br></pre></td></tr></table></figure><p>3D旋轉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.rotation3DEffect(.degrees(60), axis: (x: 1, y: 0, z: 0))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Text-用法&quot;&gt;&lt;a href=&quot;#Text-用法&quot; class=&quot;headerlink&quot; title=&quot;Text 用法&quot;&gt;&lt;/a&gt;Text 用法&lt;/h2&gt;&lt;h3 id=&quot;顯示簡單文字&quot;&gt;&lt;a href=&quot;#顯示簡單文字&quot; class=&quot;headerlink&quot; title=&quot;顯示簡單文字&quot;&gt;&lt;/a&gt;顯示簡單文字&lt;/h3&gt;&lt;p&gt;ContentView已在中生成的範例代碼向你展示瞭如何顯示一行文字。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Text(&amp;quot;Hello, World!&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="SwiftUI tutorials" scheme="https://chucs.github.io/categories/SwiftUI-tutorials/"/>
    
    
      <category term="swiftui" scheme="https://chucs.github.io/tags/swiftui/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_3_C</title>
    <link href="https://chucs.github.io/ALDS1-3-C-Doubly-Linked-List/"/>
    <id>https://chucs.github.io/ALDS1-3-C-Doubly-Linked-List/</id>
    <published>2020-07-13T05:06:41.000Z</published>
    <updated>2020-07-18T02:35:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-3-C-Doubly-Linked-List"><a href="#AOJ-ALDS1-3-C-Doubly-Linked-List" class="headerlink" title="AOJ ALDS1_3_C - Doubly Linked List"></a>AOJ ALDS1_3_C - Doubly Linked List</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_3_C" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>寫一個具備以下功能的Doubly Linked List:<br>insert x: 加入一個元素x在list的最前面.<br>delete x: 刪除一個元素x. 如果沒有找到，不必做任何動作.<br>deleteFirst: 刪除list第一個元素.<br>deleteLast: 刪除list最後一個元素.</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><h5 id="節點"><a href="#節點" class="headerlink" title="節點"></a>節點</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct Node&#123;</span><br><span class="line">int data;</span><br><span class="line">    &#x2F;&#x2F; 上一個節點</span><br><span class="line">Node* prev;</span><br><span class="line">    &#x2F;&#x2F; 下一個節點</span><br><span class="line">Node* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先我們要先宣告一個結構分別為資料,上個節點和下一個節點。</p><h5 id="新增數字"><a href="#新增數字" class="headerlink" title="新增數字"></a>新增數字</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void insertNode(int x)&#123;</span><br><span class="line">    Node* tmpNode &#x3D; motherNode-&gt;next;</span><br><span class="line">    motherNode-&gt;next &#x3D; new Node();</span><br><span class="line">    motherNode-&gt;next-&gt;data &#x3D; x;</span><br><span class="line">    motherNode-&gt;next-&gt;next &#x3D; tmpNode;</span><br><span class="line">    motherNode-&gt;next-&gt;prev &#x3D; motherNode;</span><br><span class="line">    tmpNode-&gt;prev &#x3D; motherNode-&gt;next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>先新增一個新節點然後將資料放入後，與主節點做連接。</p><h5 id="刪除數字"><a href="#刪除數字" class="headerlink" title="刪除數字"></a>刪除數字</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void deleteNode(int x)&#123;</span><br><span class="line">    Node* tmpNode &#x3D; motherNode-&gt;next;</span><br><span class="line">    while(tmpNode !&#x3D; motherNode &amp;&amp; tmpNode-&gt;data !&#x3D; x)&#123;</span><br><span class="line">        tmpNode &#x3D; tmpNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    if(tmpNode !&#x3D; motherNode)&#123;</span><br><span class="line">        tmpNode-&gt;prev-&gt;next &#x3D; tmpNode-&gt;next;</span><br><span class="line">        tmpNode-&gt;next-&gt;prev &#x3D; tmpNode-&gt;prev;</span><br><span class="line">        delete tmpNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>逐一檢查節點資料是否為x，如果找到了就將next與prev的節點換成下一個位置的，然後刪除節點。</p><h5 id="刪除最前面的"><a href="#刪除最前面的" class="headerlink" title="刪除最前面的"></a>刪除最前面的</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void deleteFirst()&#123;</span><br><span class="line">    Node* tmpNode &#x3D; motherNode-&gt;next;</span><br><span class="line">    motherNode-&gt;next &#x3D; motherNode-&gt;next-&gt;next;</span><br><span class="line">    motherNode-&gt;next-&gt;prev &#x3D; motherNode;</span><br><span class="line">    delete tmpNode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>將最前面的節點交換後與主節點連接，然後再將他刪除。</p><h5 id="刪除最後面的"><a href="#刪除最後面的" class="headerlink" title="刪除最後面的"></a>刪除最後面的</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void deleteLast()&#123;</span><br><span class="line">    Node* tmpNode &#x3D; motherNode-&gt;prev;</span><br><span class="line">    motherNode-&gt;prev &#x3D; motherNode-&gt;prev-&gt;prev;</span><br><span class="line">    motherNode-&gt;prev-&gt;next &#x3D; motherNode;</span><br><span class="line">    delete tmpNode; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>將最後面的節點交換後與主節點連接，然後再將他刪除。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/b9f0ee48e8f8965c9b8b30ecaeee9afe.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-3-C-Doubly-Linked-List&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-3-C-Doubly-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_3_C - Doubly Linked List&quot;&gt;&lt;/a&gt;AOJ ALDS1_3_C - Doubly Linked List&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_3_C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;寫一個具備以下功能的Doubly Linked List:&lt;br&gt;insert x: 加入一個元素x在list的最前面.&lt;br&gt;delete x: 刪除一個元素x. 如果沒有找到，不必做任何動作.&lt;br&gt;deleteFirst: 刪除list第一個元素.&lt;br&gt;deleteLast: 刪除list最後一個元素.&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_3_B</title>
    <link href="https://chucs.github.io/ALDS1-3-B-Queue/"/>
    <id>https://chucs.github.io/ALDS1-3-B-Queue/</id>
    <published>2020-07-12T09:29:26.000Z</published>
    <updated>2020-08-09T05:59:32.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-3-B-Queue"><a href="#AOJ-ALDS1-3-B-Queue" class="headerlink" title="AOJ ALDS1_3_B - Queue"></a>AOJ ALDS1_3_B - Queue</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_3_B" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意："><a href="#題意：" class="headerlink" title="題意："></a>題意：</h4><p>在稱為循環調度的處理方法中，CPU按順序處理進程。每個過程最多處理ms（也就輸入中的q）。如果已經完成q毫秒，但是該過程尚未完成，則移至該行的 末尾，就有CPU分配給下一個過程。如果這個進程結束了那就輸出花費時間。</p><a id="more"></a><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><p>利用queue先進先出的規則把所有的進程進行排序，然後按照順序依次執行的時間，並設置一個變數訪問轉換時間，直到所有進程結束。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/c107bef46c7fcda613c6628d2849004c.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-3-B-Queue&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-3-B-Queue&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_3_B - Queue&quot;&gt;&lt;/a&gt;AOJ ALDS1_3_B - Queue&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_3_B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意：&quot;&gt;&lt;a href=&quot;#題意：&quot; class=&quot;headerlink&quot; title=&quot;題意：&quot;&gt;&lt;/a&gt;題意：&lt;/h4&gt;&lt;p&gt;在稱為循環調度的處理方法中，CPU按順序處理進程。每個過程最多處理ms（也就輸入中的q）。如果已經完成q毫秒，但是該過程尚未完成，則移至該行的 末尾，就有CPU分配給下一個過程。如果這個進程結束了那就輸出花費時間。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_3_A</title>
    <link href="https://chucs.github.io/ALDS1-3-A-Stack/"/>
    <id>https://chucs.github.io/ALDS1-3-A-Stack/</id>
    <published>2020-07-12T09:29:12.000Z</published>
    <updated>2020-07-18T02:35:47.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-3-A-Stack"><a href="#AOJ-ALDS1-3-A-Stack" class="headerlink" title="AOJ ALDS1_3_A - Stack"></a>AOJ ALDS1_3_A - Stack</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_3_A" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>Reverse Polish表示法是每個運算符都遵循其所有操作數的一種表示法。例如，正常符號中的表達式（1 + 2）*（5 + 4）可以用Reverse Polish表示為1 2 + 5 4 + *。Reverse Polish的優點之一是它沒有括號。</p><p>編寫一個程序，該程序以”Reverse Polish”符號讀取表達式並打印計算結果。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>利用stack先進後出的規則存取每個數字，遇到＋,-,*就把上面兩個數字排出並作運算，算完後再放入stack中。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/c3b0db7392bc501256200706688ca8bc.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-3-A-Stack&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-3-A-Stack&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_3_A - Stack&quot;&gt;&lt;/a&gt;AOJ ALDS1_3_A - Stack&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_3_A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;Reverse Polish表示法是每個運算符都遵循其所有操作數的一種表示法。例如，正常符號中的表達式（1 + 2）*（5 + 4）可以用Reverse Polish表示為1 2 + 5 4 + *。Reverse Polish的優點之一是它沒有括號。&lt;/p&gt;
&lt;p&gt;編寫一個程序，該程序以”Reverse Polish”符號讀取表達式並打印計算結果。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_2_C</title>
    <link href="https://chucs.github.io/ALDS1-2-C-Stable-Sort/"/>
    <id>https://chucs.github.io/ALDS1-2-C-Stable-Sort/</id>
    <published>2020-07-12T05:24:05.000Z</published>
    <updated>2020-07-18T02:35:47.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-2-C-Stable-Sort"><a href="#AOJ-ALDS1-2-C-Stable-Sort" class="headerlink" title="AOJ ALDS1_2_C - Stable Sort"></a>AOJ ALDS1_2_C - Stable Sort</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_2_C" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>讓我們安排一副紙牌。總共有36張卡，四個狀態（S，H，C，D）和9個值（1、2，… 9）。<br>請將他們由小到大排序，並檢查排序結果是否有按照出現順序排序。例如：輸入 “D1 S2 H2”，排序結果為”D1 H2 S2”，而在輸入時S2比H2前面因此輸出”Not stable”，若排序結果為”D1 S2 H2”，那麼輸出”Stable”。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>先宣告一個結構儲存三個狀態分別為，狀態、數字和輸入順序，利用此結構進行選擇排序與泡沫排序，排序完後檢查陣列，如果數字一樣而且前面順序大於後面那就代表不穩定。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/78500fcd44526355e664551e4333f5aa.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-2-C-Stable-Sort&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-2-C-Stable-Sort&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_2_C - Stable Sort&quot;&gt;&lt;/a&gt;AOJ ALDS1_2_C - Stable Sort&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_2_C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;讓我們安排一副紙牌。總共有36張卡，四個狀態（S，H，C，D）和9個值（1、2，… 9）。&lt;br&gt;請將他們由小到大排序，並檢查排序結果是否有按照出現順序排序。例如：輸入 “D1 S2 H2”，排序結果為”D1 H2 S2”，而在輸入時S2比H2前面因此輸出”Not stable”，若排序結果為”D1 S2 H2”，那麼輸出”Stable”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="sortings" scheme="https://chucs.github.io/tags/sortings/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_2_B</title>
    <link href="https://chucs.github.io/ALDS1-2-B-Selection-Sort/"/>
    <id>https://chucs.github.io/ALDS1-2-B-Selection-Sort/</id>
    <published>2020-07-10T07:13:36.000Z</published>
    <updated>2020-07-18T02:35:47.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-2-B-Selection-Sort"><a href="#AOJ-ALDS1-2-B-Selection-Sort" class="headerlink" title="AOJ ALDS1_2_B - Selection Sort"></a>AOJ ALDS1_2_B - Selection Sort</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_2_B" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>利用選擇排序排序，當i不等於mini時才交換，請把結果與交換次數輸出。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SelectionSort(A)</span><br><span class="line">    for i &#x3D; 0 to A.length-1</span><br><span class="line">        mini &#x3D; i</span><br><span class="line">        for j &#x3D; i to A.length-1</span><br><span class="line">            if A[j] &lt; A[mini]</span><br><span class="line">                mini &#x3D; j</span><br><span class="line">        swap A[i] and A[mini]</span><br></pre></td></tr></table></figure><p>先將一個數字的位置記住後逐一比較，如果比他大就將mini取代新的index，全部比較完後在進行交換。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/687c3ee75d3561997469a9830b92b038.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-2-B-Selection-Sort&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-2-B-Selection-Sort&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_2_B - Selection Sort&quot;&gt;&lt;/a&gt;AOJ ALDS1_2_B - Selection Sort&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_2_B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;利用選擇排序排序，當i不等於mini時才交換，請把結果與交換次數輸出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="sortings" scheme="https://chucs.github.io/tags/sortings/"/>
    
  </entry>
  
  <entry>
    <title>AOJ ALDS1_2_A</title>
    <link href="https://chucs.github.io/ALDS1-2-A-Bubble-Sort/"/>
    <id>https://chucs.github.io/ALDS1-2-A-Bubble-Sort/</id>
    <published>2020-07-10T06:38:45.000Z</published>
    <updated>2020-07-18T02:35:47.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AOJ-ALDS1-2-A-Bubble-Sort"><a href="#AOJ-ALDS1-2-A-Bubble-Sort" class="headerlink" title="AOJ ALDS1_2_A - Bubble Sort"></a>AOJ ALDS1_2_A - Bubble Sort</h1><p><a href="https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_2_A" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>利用泡沫排序排序，將結果與交換次數輸出。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BubbleSort(A)</span><br><span class="line">    for i &#x3D; 0 to A.length-1</span><br><span class="line">        for j &#x3D; A.length-1 downto i+1</span><br><span class="line">            if A[j] &lt; A[j-1]</span><br><span class="line">                swap A[j] and A[j-1]</span><br></pre></td></tr></table></figure><p>一邊比較一邊交換。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/d75e8bdad871d3b66348390c03f6f3d5.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AOJ-ALDS1-2-A-Bubble-Sort&quot;&gt;&lt;a href=&quot;#AOJ-ALDS1-2-A-Bubble-Sort&quot; class=&quot;headerlink&quot; title=&quot;AOJ ALDS1_2_A - Bubble Sort&quot;&gt;&lt;/a&gt;AOJ ALDS1_2_A - Bubble Sort&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://onlinejudge.u-aizu.ac.jp/courses/lesson/1/ALDS1/all/ALDS1_2_A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;利用泡沫排序排序，將結果與交換次數輸出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AOJ" scheme="https://chucs.github.io/categories/AOJ/"/>
    
    
      <category term="sortings" scheme="https://chucs.github.io/tags/sortings/"/>
    
  </entry>
  
  <entry>
    <title>Asm mips - 006 Function</title>
    <link href="https://chucs.github.io/asm-mips-006-function/"/>
    <id>https://chucs.github.io/asm-mips-006-function/</id>
    <published>2020-07-02T12:15:39.000Z</published>
    <updated>2020-07-18T02:35:47.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MIPS-組合語言-函式"><a href="#MIPS-組合語言-函式" class="headerlink" title="MIPS 組合語言 - 函式"></a>MIPS 組合語言 - 函式</h1><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>練習函式運用。</p><a id="more"></a><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/Daviswww/2e7d22f2102929bf98e470d680b6b25c.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MIPS-組合語言-函式&quot;&gt;&lt;a href=&quot;#MIPS-組合語言-函式&quot; class=&quot;headerlink&quot; title=&quot;MIPS 組合語言 - 函式&quot;&gt;&lt;/a&gt;MIPS 組合語言 - 函式&lt;/h1&gt;&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;練習函式運用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Assembly tutorials" scheme="https://chucs.github.io/categories/Assembly-tutorials/"/>
    
    
      <category term="asm" scheme="https://chucs.github.io/tags/asm/"/>
    
      <category term="mips" scheme="https://chucs.github.io/tags/mips/"/>
    
  </entry>
  
</feed>
