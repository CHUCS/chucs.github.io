<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHUCSIE</title>
  
  <subtitle>解題報告</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chucs.github.io/"/>
  <updated>2021-01-19T06:11:55.906Z</updated>
  <id>https://chucs.github.io/</id>
  
  <author>
    <name>CHUCSIE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust 013 Enums</title>
    <link href="https://chucs.github.io/rust-013-enums/"/>
    <id>https://chucs.github.io/rust-013-enums/</id>
    <published>2021-01-19T06:04:02.000Z</published>
    <updated>2021-01-19T06:11:55.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-Enums"><a href="#Rust-Enums" class="headerlink" title="Rust Enums"></a>Rust Enums</h1><p>Rust中的枚舉與其他編譯語言（如C）相似，但有一些重要區別，使它們更強大。如果您來自函數式編程背景，Rust稱為枚舉的數通常被稱為代數數據類型。重要的細節是每個枚舉變量都可以具有數據。</p><a id="more"></a><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span></span> &#123;</span><br><span class="line">    Up(Point),</span><br><span class="line">    Down(Point),</span><br><span class="line">    Left(Point),</span><br><span class="line">    Right(Point),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    x: <span class="built_in">i32</span>,</span><br><span class="line">    y: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// input::single_input_string_I32();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> u = Direction::Up(Point &#123;x: <span class="number">0</span>, y: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們接著可以利用match來判斷，現在選的是哪個enum。而在下面這個程式是利用座標來判斷這個變數是屬於哪個enum的，然後再輸出對應的按鍵。而在destruct這個函式中可以看到<code>ref</code>，<code>ref</code>用來表示你要引用一個未打包的值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(dead_code)]</span></span><br><span class="line"><span class="keyword">mod</span> input;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    x: <span class="built_in">i32</span>,</span><br><span class="line">    y: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Direction</span></span> &#123;</span><br><span class="line">    Up(Point),</span><br><span class="line">    Down(Point),</span><br><span class="line">    Left(Point),</span><br><span class="line">    Right(Point),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Keys</span></span> &#123;</span><br><span class="line">    UpKey(<span class="built_in">String</span>),</span><br><span class="line">    DownKey(<span class="built_in">String</span>),</span><br><span class="line">    LeftKey(<span class="built_in">String</span>),</span><br><span class="line">    RightKey(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Direction &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">match_direction</span></span>(&amp;<span class="keyword">self</span>) -&gt; Keys &#123;</span><br><span class="line">        <span class="keyword">match</span> *<span class="keyword">self</span>&#123;</span><br><span class="line">            Direction::Up(_) =&gt; Keys::UpKey(<span class="built_in">String</span>::from(<span class="string">"W"</span>)),</span><br><span class="line">            Direction::Down(_) =&gt; Keys::DownKey(<span class="built_in">String</span>::from(<span class="string">"s"</span>)),</span><br><span class="line">            Direction::Left(_) =&gt; Keys::LeftKey(<span class="built_in">String</span>::from(<span class="string">"a"</span>)),</span><br><span class="line">            Direction::Right(_) =&gt; Keys::RightKey(<span class="built_in">String</span>::from(<span class="string">"d"</span>)),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Keys &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">destruct</span></span>(&amp;<span class="keyword">self</span>) -&gt; &amp;<span class="built_in">String</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> *<span class="keyword">self</span>&#123;</span><br><span class="line">            Keys::UpKey(<span class="keyword">ref</span> s) =&gt; s,</span><br><span class="line">            Keys::DownKey(<span class="keyword">ref</span> s) =&gt; s,</span><br><span class="line">            Keys::LeftKey(<span class="keyword">ref</span> s) =&gt; s,</span><br><span class="line">            Keys::RightKey(<span class="keyword">ref</span> s) =&gt; s,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// input::single_input_string_I32();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> u = Direction::Up(Point &#123;x: <span class="number">0</span>, y: <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">let</span> k = u.match_direction();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-Enums&quot;&gt;&lt;a href=&quot;#Rust-Enums&quot; class=&quot;headerlink&quot; title=&quot;Rust Enums&quot;&gt;&lt;/a&gt;Rust Enums&lt;/h1&gt;&lt;p&gt;Rust中的枚舉與其他編譯語言（如C）相似，但有一些重要區別，使它們更強大。如果您來自函數式編程背景，Rust稱為枚舉的數通常被稱為代數數據類型。重要的細節是每個枚舉變量都可以具有數據。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust 013 Options</title>
    <link href="https://chucs.github.io/rust-014-options/"/>
    <id>https://chucs.github.io/rust-014-options/</id>
    <published>2021-01-19T06:03:44.000Z</published>
    <updated>2021-01-19T06:11:59.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><p>利用Options回傳一個直來判斷函式中有沒有錯誤，如果有錯誤就可以為傳None否則回傳Some，而在Some裡面的直就是回傳變數的值。我們可以利用下面的程式碼來判斷y是不是為零，如果是零就回傳None否則回傳相除。</p><a id="more"></a><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">div</span></span>(x: <span class="built_in">f64</span>, y: <span class="built_in">f64</span>) -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">f64</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> y == <span class="number">0.0</span> &#123;</span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="literal">Some</span>(x / y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> res = div(<span class="number">5.0</span>, <span class="number">7.0</span>);</span><br><span class="line">    <span class="keyword">match</span> res &#123;</span><br><span class="line">        <span class="literal">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">"&#123;:.3&#125;"</span>, x),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">"y == 0"</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Options&quot;&gt;&lt;a href=&quot;#Options&quot; class=&quot;headerlink&quot; title=&quot;Options&quot;&gt;&lt;/a&gt;Options&lt;/h1&gt;&lt;p&gt;利用Options回傳一個直來判斷函式中有沒有錯誤，如果有錯誤就可以為傳None否則回傳Some，而在Some裡面的直就是回傳變數的值。我們可以利用下面的程式碼來判斷y是不是為零，如果是零就回傳None否則回傳相除。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 001 Install</title>
    <link href="https://chucs.github.io/flutter-001-install/"/>
    <id>https://chucs.github.io/flutter-001-install/</id>
    <published>2021-01-18T06:37:26.000Z</published>
    <updated>2021-01-19T06:13:06.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Install-Flutter-（macOS）"><a href="#Install-Flutter-（macOS）" class="headerlink" title="Install Flutter （macOS）"></a>Install Flutter （macOS）</h1><h3 id="Get-the-Flutter-SDK"><a href="#Get-the-Flutter-SDK" class="headerlink" title="Get the Flutter SDK"></a>Get the Flutter SDK</h3><ol><li><p>下載以下安裝包以獲取Flutter SDK的最新穩定版本:<br><a href="https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_1.22.5-stable.zip" target="_blank" rel="noopener">flutter_macos_1.22.5-stable.zip</a></p><a id="more"></a></li><li><p>將文件打開到所需位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/development</span><br><span class="line">$ unzip ~/Downloads/flutter_macos_1.22.5-stable.zip</span><br></pre></td></tr></table></figure></li><li><p>將Flutter工具添加到您的路徑：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:`pwd`/flutter/bin"</span></span><br></pre></td></tr></table></figure></li></ol><p>如果路徑加入後會消失的話可以參考一下步驟：</p><ol><li><p>開啟終端機後到達根目錄然後打開zshrc（如果因權限問題無法修改可輸入<code>sudo vim .zshrc</code>）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ vim .zshrc</span><br></pre></td></tr></table></figure><blockquote><p>你也可以設定<code>bash</code>或其他的終端機。</p></blockquote></li></ol><ol start="2"><li>輸入 i 來新增路徑你的<code>Flutter(/bin:/Library/flutter/bin)</code>安裝路徑在<code>.bin:$PATH/</code>後面，例如：<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="string">"$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH/bin:/Library/flutter/bin"</span></span><br></pre></td></tr></table></figure><blockquote><p>輸入完成後, 按下<code>esc</code>然後<code>:wq</code>儲存</p></blockquote></li></ol><ol start="3"><li>檢查是否成功設置<blockquote><p>將設置的終端機關閉後重新開器一個新的終端機來檢查路徑是否設置成功。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> flutter</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="設置-VSCdoe"><a href="#設置-VSCdoe" class="headerlink" title="設置 VSCdoe"></a>設置 VSCdoe</h3><p>安裝VSCode的<code>Dart</code>套件包。<br><img src="Ok6J2f9.jpg" alt=""><br>安裝VSCode的<code>Flutter</code>套件包。<br><img src="QL4qXq8.jpg" alt=""></p><hr><h3 id="設置-XCode"><a href="#設置-XCode" class="headerlink" title="設置 XCode"></a>設置 XCode</h3><ol><li><p>安裝Xcode的最新穩定版本（使用Web下載或Mac App Store）。</p></li><li><p>通過從命令行運行以下命令，將Xcode命令行工具配置為使用新安裝的Xcode版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class="line">$ sudo xcodebuild -runFirstLaunch</span><br></pre></td></tr></table></figure></li><li><p>通過一次打開Xcode並<code>sudo xcodebuild -license</code>從命令行確認或運行來確保Xcode許可協議已簽署 。<br>:::info<br>使用Xcode，您將能夠在iOS設備或模擬器上運行Flutter應用。<br>:::</p></li></ol><hr><h3 id="設置-模擬器"><a href="#設置-模擬器" class="headerlink" title="設置 模擬器"></a>設置 模擬器</h3><p>要準備在iOS模擬器上運行和測試您的Flutter應用，請執行以下步驟：</p><ol><li><p>在終端機中輸入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open -a Simulator</span><br></pre></td></tr></table></figure></li><li><p>點擊模擬器右鍵，選擇Device-&gt;IOS-&gt;選擇一個模擬器安裝。（建議iPhone 5s以上）</p></li><li><p>安裝完後就開著</p></li></ol><hr><h3 id="Create-the-app"><a href="#Create-the-app" class="headerlink" title="Create the app"></a>Create the app</h3><p>檢查設備確認與設備連線。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter devices</span><br></pre></td></tr></table></figure><p>:::info<br>1 connected device:</p><p>iphone X (mobile) • 3E841537-934D-4DBE-933A-3E1C9A5D727F • ios •<br>com.apple.CoreSimulator.SimRuntime.iOS-14-3 (simulator)<br>:::</p><p>執行APP如下面命令，，成功後的畫面如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter run</span><br></pre></td></tr></table></figure><p><img src="vPUuq1N.jpg" alt=""></p><hr><h3 id="Run-flutter-doctor"><a href="#Run-flutter-doctor" class="headerlink" title="Run flutter doctor"></a>Run flutter doctor</h3><p>運行以下命令以查看是否需要安裝任何依賴項才能完成設置，由於我沒有裝Android所以顯示未安裝成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter doctor</span><br></pre></td></tr></table></figure><p><img src="1rHwDHW.jpg" alt=""></p><hr><p><a href="https://flutter.dev/docs/get-started/install/macos" target="_blank" rel="noopener">flutter source</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Install-Flutter-（macOS）&quot;&gt;&lt;a href=&quot;#Install-Flutter-（macOS）&quot; class=&quot;headerlink&quot; title=&quot;Install Flutter （macOS）&quot;&gt;&lt;/a&gt;Install Flutter （macOS）&lt;/h1&gt;&lt;h3 id=&quot;Get-the-Flutter-SDK&quot;&gt;&lt;a href=&quot;#Get-the-Flutter-SDK&quot; class=&quot;headerlink&quot; title=&quot;Get the Flutter SDK&quot;&gt;&lt;/a&gt;Get the Flutter SDK&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;下載以下安裝包以獲取Flutter SDK的最新穩定版本:&lt;br&gt;&lt;a href=&quot;https://storage.googleapis.com/flutter_infra/releases/stable/macos/flutter_macos_1.22.5-stable.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;flutter_macos_1.22.5-stable.zip&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
      <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Rust 012 EOF input</title>
    <link href="https://chucs.github.io/rust-012-eof-input/"/>
    <id>https://chucs.github.io/rust-012-eof-input/</id>
    <published>2020-12-31T06:48:20.000Z</published>
    <updated>2021-01-01T06:39:29.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-EOF-輸入"><a href="#Rust-EOF-輸入" class="headerlink" title="Rust EOF 輸入"></a>Rust EOF 輸入</h1><p>如果你的輸入是要EOF的也就是用<code>ctrl+Z</code>結束輸入的話，我們可以使用rust的stdin來判斷它是不是0，那我們在這使用Option來回傳使否成功，如果輸入有值得話Some就會回傳輸入的值否則就是空的，那麼上面的while迴圈就會結束。</p><a id="more"></a><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> vec1 = <span class="built_in">Vec</span>::new();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Input"</span>);</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(input) = single_input() &#123; </span><br><span class="line">        vec1.push(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">single_input</span></span>() -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line">    <span class="keyword">let</span> input = std::io::stdin().read_line(&amp;<span class="keyword">mut</span> s).expect(<span class="string">"err read"</span>);</span><br><span class="line">    <span class="keyword">if</span> input == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">Some</span>(s.trim().parse::&lt;<span class="built_in">i32</span>&gt;().unwrap());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-EOF-輸入&quot;&gt;&lt;a href=&quot;#Rust-EOF-輸入&quot; class=&quot;headerlink&quot; title=&quot;Rust EOF 輸入&quot;&gt;&lt;/a&gt;Rust EOF 輸入&lt;/h1&gt;&lt;p&gt;如果你的輸入是要EOF的也就是用&lt;code&gt;ctrl+Z&lt;/code&gt;結束輸入的話，我們可以使用rust的stdin來判斷它是不是0，那我們在這使用Option來回傳使否成功，如果輸入有值得話Some就會回傳輸入的值否則就是空的，那麼上面的while迴圈就會結束。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust 011 Input</title>
    <link href="https://chucs.github.io/rust-011-input/"/>
    <id>https://chucs.github.io/rust-011-input/</id>
    <published>2020-12-31T06:46:07.000Z</published>
    <updated>2020-12-31T06:54:39.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-輸入"><a href="#Rust-輸入" class="headerlink" title="Rust 輸入"></a>Rust 輸入</h1><h3 id="單一輸入"><a href="#單一輸入" class="headerlink" title="單一輸入"></a>單一輸入</h3><p>利用rust的標準輸入法輸入一行字串，<code>std::io::stdin()</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line">    std::io::stdin().read_line(&amp;<span class="keyword">mut</span> s).expect(<span class="string">"err read"</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果使用一個loop在這裡輸入時你會發現你的輸入會一直連續下去，跟其他語言不同他並不會取代掉原本的輸入，只要不重新new原本的變數的話輸入是會一直連續下去的，因此輸入後可以對字串進行切割等處理。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span>&#123;</span><br><span class="line">        std::io::stdin().read_line(&amp;<span class="keyword">mut</span> s).expect(<span class="string">"err read"</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="vHHdK7O.png" alt=""></p><h3 id="重新產生避免連續"><a href="#重新產生避免連續" class="headerlink" title="重新產生避免連續"></a>重新產生避免連續</h3><p>又或者我們可以寫成一個函式讓他每次都重新產生一次。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> input = single_input();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">single_input</span></span>() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line">    std::io::stdin().read_line(&amp;<span class="keyword">mut</span> s).expect(<span class="string">"err read"</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="SZeE6yq.png" alt=""></p><h3 id="輸入型態轉換"><a href="#輸入型態轉換" class="headerlink" title="輸入型態轉換"></a>輸入型態轉換</h3><p>接著我們來將依行輸入轉成其他的型態，由下面來看關鍵的就是我們將上面return的<code>String</code>改成<code>i32</code>，接著最重要的一行就是我們將字串轉成其他的型態<code>s.trim().parse::&lt;i32&gt;().unwrap();</code>，我們來將它分解開來逐一介紹。</p><p><code>trim()</code>的意思是會把字串前後不重要的符號都移除 (例如空白跟換行符號)。  </p><p><code>parse::&lt;T&gt;()</code>是可以解析成其他的型態，只要在角括號裡改成想要的型態就可以了。  </p><p><code>unwrap()</code>很多情況下 function 吐回來的東西是 Result，Result 的意思是他除了是你想要的東西之外，也有可能是一個錯誤一般情況下應該要處理這個錯誤，如果對 Result 做 unwrap() 代表忽略錯誤的情況真的發生錯誤時就直接讓程式終止。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> input: <span class="built_in">i32</span> = single_input();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Output: &#123;&#125;"</span>, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">single_input</span></span>() -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line">    std::io::stdin().read_line(&amp;<span class="keyword">mut</span> s).expect(<span class="string">"err read"</span>);</span><br><span class="line">    <span class="keyword">return</span> s.trim().parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="T8IzkIC.png" alt=""></p><h3 id="輸入後存進vector"><a href="#輸入後存進vector" class="headerlink" title="輸入後存進vector"></a>輸入後存進vector</h3><p>如果你的輸入是輸入一個換一行的話，你可以將每次的輸入都<code>push</code>進一個vec內，這樣所有的值都可以存在你所創的vec內。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> vec = <span class="built_in">Vec</span>::new();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> input: <span class="built_in">i32</span> = single_input();</span><br><span class="line">        vec.push(input);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> vec &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">single_input</span></span>() -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line">    std::io::stdin().read_line(&amp;<span class="keyword">mut</span> s).expect(<span class="string">"err read"</span>);</span><br><span class="line">    <span class="keyword">return</span> s.trim().parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="x64eg4b.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-輸入&quot;&gt;&lt;a href=&quot;#Rust-輸入&quot; class=&quot;headerlink&quot; title=&quot;Rust 輸入&quot;&gt;&lt;/a&gt;Rust 輸入&lt;/h1&gt;&lt;h3 id=&quot;單一輸入&quot;&gt;&lt;a href=&quot;#單一輸入&quot; class=&quot;headerlink&quot; title=&quot;單一輸入&quot;&gt;&lt;/a&gt;單一輸入&lt;/h3&gt;&lt;p&gt;利用rust的標準輸入法輸入一行字串，&lt;code&gt;std::io::stdin()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; s = &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;::new();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::io::stdin().read_line(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; s).expect(&lt;span class=&quot;string&quot;&gt;&quot;err read&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#125;&quot;&lt;/span&gt;, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust 010 Match</title>
    <link href="https://chucs.github.io/rust-010-match/"/>
    <id>https://chucs.github.io/rust-010-match/</id>
    <published>2020-11-12T12:26:47.000Z</published>
    <updated>2020-11-12T12:34:33.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-匹配"><a href="#Rust-匹配" class="headerlink" title="Rust 匹配"></a>Rust 匹配</h1><p>這語法就像一個選擇器一樣，根據值選擇內容，而你也可以設定很多個值甚至是一個範圍都可以。</p><a id="more"></a><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">matchs</span></span>(n: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> n &#123;</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">"1"</span>),</span><br><span class="line">        | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> =&gt; <span class="built_in">println!</span>(<span class="string">"234"</span>),</span><br><span class="line">        <span class="number">5</span>..=<span class="number">6</span> =&gt; <span class="built_in">println!</span>(<span class="string">"5~6"</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">"GG"</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    matchs(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>match還可以用tuple來判斷裡面的值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">match_tuple</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> tuple = (<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> tuple &#123;</span><br><span class="line">        (<span class="number">0</span>, x) =&gt; <span class="built_in">println!</span>(<span class="string">"(0, &#123;&#125;)"</span>, x),</span><br><span class="line">        (x, y) <span class="keyword">if</span> x == y =&gt; <span class="built_in">println!</span>(<span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, x, y),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">"GG"</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    match_tuple();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>match可以允許我們綁定其他的變數，假設我設定n但是我想用k是可以的，只需要加一個@。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">match_v</span></span>(n: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> n &#123;</span><br><span class="line">        k @ <span class="number">1</span> ..= <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">"Value &#123;&#125;"</span>, k),</span><br><span class="line">        k @ <span class="number">4</span> ..= <span class="number">6</span> =&gt; <span class="built_in">println!</span>(<span class="string">"Value &#123;&#125;"</span>, k),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">"GG"</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    match_v(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-匹配&quot;&gt;&lt;a href=&quot;#Rust-匹配&quot; class=&quot;headerlink&quot; title=&quot;Rust 匹配&quot;&gt;&lt;/a&gt;Rust 匹配&lt;/h1&gt;&lt;p&gt;這語法就像一個選擇器一樣，根據值選擇內容，而你也可以設定很多個值甚至是一個範圍都可以。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust 009 Loop</title>
    <link href="https://chucs.github.io/rust-009-loop/"/>
    <id>https://chucs.github.io/rust-009-loop/</id>
    <published>2020-11-12T12:26:28.000Z</published>
    <updated>2020-11-12T12:35:25.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-迴圈"><a href="#Rust-迴圈" class="headerlink" title="Rust 迴圈"></a>Rust 迴圈</h1><p>迴圈的好處就是可以替我們重複做一些固定得事情，使程式更加簡潔與方便。</p><a id="more"></a><h2 id="loop"><a href="#loop" class="headerlink" title="#loop"></a>#loop</h2><p>迴圈可以重複做同樣的事情，如下面範例我就重複印出<code>Hello rust!</code>，再利用剛剛所學的<code>if</code>來判斷<code>i</code>有沒有大於等於<code>n</code>，而<code>break</code>這個指令是用來結束這個回圈用的，也就是說跳出這一層迴圈。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">loops</span></span>(n: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Hello rust!"</span>);</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> i &gt;= n &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    loops(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while-loop"><a href="#while-loop" class="headerlink" title="#while loop"></a>#while loop</h2><p>在while中可以加入判斷，如下面範例就是判斷<code>i&lt;n</code>，所以如果當i大於n時就會結束迴圈。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">while_loop</span></span>(n: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> i &lt; n &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Hello rust &#123;&#125;"</span>, i);</span><br><span class="line">        i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    while_loop(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-loop"><a href="#for-loop" class="headerlink" title="#for loop"></a>#for loop</h2><p>for迴圈是一個比較特別的迴圈，看下面範例來說的話，i是a給他的值，就像是第一次拿到10，第二次拿到20以此類推遞增。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">for_loop_vec</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    for_loop_vec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當然你也可以設定範圍給他，而<code>..</code>就是小於的意思，<code>..=</code>則是小於等於。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">for_loop_var</span></span>(n: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..n &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"A &#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..=n &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"B &#123;&#125;"</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    for_loop_var(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-迴圈&quot;&gt;&lt;a href=&quot;#Rust-迴圈&quot; class=&quot;headerlink&quot; title=&quot;Rust 迴圈&quot;&gt;&lt;/a&gt;Rust 迴圈&lt;/h1&gt;&lt;p&gt;迴圈的好處就是可以替我們重複做一些固定得事情，使程式更加簡潔與方便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust 008 If Else</title>
    <link href="https://chucs.github.io/rust-008-if-else/"/>
    <id>https://chucs.github.io/rust-008-if-else/</id>
    <published>2020-11-12T12:25:48.000Z</published>
    <updated>2020-11-12T12:35:01.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-判斷句"><a href="#Rust-判斷句" class="headerlink" title="Rust 判斷句"></a>Rust 判斷句</h1><p>在許多的程式語言中，我們可以看到幾乎都有一些比較的符號來判斷，例如<code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>那比較特別的是不等於，在程式中的不等於是<code>!=</code>，介紹完這些候我們就可以來討論判斷句了。</p><a id="more"></a><h2 id="if-else"><a href="#if-else" class="headerlink" title="#if else"></a>#if else</h2><p>這裡我們要介紹<code>if</code>和<code>else</code>，如果n%2==0成立的話就印出<code>even</code>，否則就印出<code>odd</code>，就如字面上的意思一樣。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">if_else</span></span>(n: <span class="built_in">u32</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span>) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"even"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"odd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    if_else(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if-else-if"><a href="#if-else-if" class="headerlink" title="#if, else if"></a>#if, else if</h2><p>這邊所要展示的是多個判斷，就是說如果A沒有達成，又如果B沒有達成的依此類推，你可以用此方法把他們寫在一起。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">if_else_if_else</span></span>(n: <span class="built_in">u32</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"zero"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span>) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"even"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"odd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    if_else_if_else(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="let-a-if"><a href="#let-a-if" class="headerlink" title="#let a = if"></a>#let a = if</h2><p>我們也可以用if else來給予變數值，但是要注意這些變數綁定的類型必須相同，否則會有錯誤。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">if_else_var</span></span>(go: <span class="built_in">bool</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="keyword">if</span> go &#123;</span><br><span class="line">        <span class="number">10</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">20</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    if_else_var(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-判斷句&quot;&gt;&lt;a href=&quot;#Rust-判斷句&quot; class=&quot;headerlink&quot; title=&quot;Rust 判斷句&quot;&gt;&lt;/a&gt;Rust 判斷句&lt;/h1&gt;&lt;p&gt;在許多的程式語言中，我們可以看到幾乎都有一些比較的符號來判斷，例如&lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;那比較特別的是不等於，在程式中的不等於是&lt;code&gt;!=&lt;/code&gt;，介紹完這些候我們就可以來討論判斷句了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust 007 Struct and Methods</title>
    <link href="https://chucs.github.io/rust-007-struct/"/>
    <id>https://chucs.github.io/rust-007-struct/</id>
    <published>2020-11-11T12:45:13.000Z</published>
    <updated>2020-11-11T14:35:28.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-結構與模塊"><a href="#Rust-結構與模塊" class="headerlink" title="Rust 結構與模塊"></a>Rust 結構與模塊</h1><p>Struct是自定義的數據類型，因此我們可以自行定義，而他也使我們能夠根據自己的需求調整數據的結構。Methods是將你所有的函式包裝再一起，而當你可以在這個模組下找到相關的函式。</p><a id="more"></a><h2 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h2><p>我們利用Struct定義我們結構，他就像一個物件一樣包含了所有你所定義的東西，當你需要取得值時你只需要<code>name.a</code>或是<code>name.b</code>就可以輕鬆地取得。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著我們創建一個函式來計算面積，傳進去的東西就是我們剛剛所宣告的物件。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(obj: Object) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.width * obj.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這邊我們利用我們所創的結構將整個物件傳入函式，你可以在Object裡面拿到你所定義的值，當你的值越多時，他可以讓你的程式碼更加得清楚，使用起來更加方便。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(obj: Object) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.width * obj.height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">run</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> o = Object &#123;</span><br><span class="line">        width: <span class="number">10</span>,</span><br><span class="line">        height: <span class="number">5</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, area(o));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Impl"><a href="#Impl" class="headerlink" title="Impl"></a>Impl</h1><p>impl關鍵字被主要用於對類型限定的方式，而<code>impl</code>中定義的功能可以是獨立的，這意味著將其稱為<code>hello::world()</code>。這有點類似於<code>hello.world()</code>的概念。  </p><p>在使用<code>impl</code>時我們一樣先創建一個<code>struct</code>來定義我們所需要的數據。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>創建完後將<code>impl</code>與創建得<code>struct</code>名稱宣告成一樣的，這將會使他綁定再一起的感覺，你可以在裡面使用你所宣告的數據。<code>self</code>得用意是引用當前模塊和標記方法的接收者，這就是為什麼下面還有一個<code>new</code>的函式，我將直傳進去後在當前的模塊中，<code>self</code>就可以拿到我所須要的數據，而這邊有一個很特別的點是，<code>new</code>裡面的<code>Object</code>可以不用寫成<code>width:width</code>，因為在rust中只要他定義的名字是一樣的就會動傳到裡面去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">struct Object&#123;</span><br><span class="line">    width: u32,</span><br><span class="line">    height: u32,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">impl Object &#123;</span><br><span class="line">    fn area(&amp;self) -&gt; u32 &#123;</span><br><span class="line">        return self.width * self.height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fn new(width: u32, height: u32) -&gt; Object &#123;</span><br><span class="line">        Object &#123;</span><br><span class="line">            width,</span><br><span class="line">            height,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn run() &#123;</span><br><span class="line">    let obj &#x3D; Object::new(10, 3);</span><br><span class="line"></span><br><span class="line">    println!(&quot;&#123;&#125;&quot;, obj.area());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想要把它拆的細一點，你也可以把<code>new</code>和<code>area</code>拆開寫也是可以的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> Object &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.width * <span class="keyword">self</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Object&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(width: <span class="built_in">u32</span>, height: <span class="built_in">u32</span>) -&gt; Object &#123;</span><br><span class="line">        Object &#123;</span><br><span class="line">            width,</span><br><span class="line">            height,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-結構與模塊&quot;&gt;&lt;a href=&quot;#Rust-結構與模塊&quot; class=&quot;headerlink&quot; title=&quot;Rust 結構與模塊&quot;&gt;&lt;/a&gt;Rust 結構與模塊&lt;/h1&gt;&lt;p&gt;Struct是自定義的數據類型，因此我們可以自行定義，而他也使我們能夠根據自己的需求調整數據的結構。Methods是將你所有的函式包裝再一起，而當你可以在這個模組下找到相關的函式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust 006 Types</title>
    <link href="https://chucs.github.io/rust-006-types/"/>
    <id>https://chucs.github.io/rust-006-types/</id>
    <published>2020-11-09T12:53:39.000Z</published>
    <updated>2020-11-10T13:24:17.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-型態"><a href="#Rust-型態" class="headerlink" title="Rust 型態"></a>Rust 型態</h1><h4 id="Integer-Types"><a href="#Integer-Types" class="headerlink" title="Integer Types"></a>Integer Types</h4><p>整數是沒有小數部分的數字。以下是在RUST中整數型態的表示方法。</p><a id="more"></a><table><thead><tr><th>Length</th><th>Signed</th><th>Unsigned</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>128-bit</td><td>i128</td><td>u128</td></tr></tbody></table><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">i8</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">i16</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c: <span class="built_in">i32</span> = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="Floating-Point-Types"><a href="#Floating-Point-Types" class="headerlink" title="Floating-Point Types"></a>Floating-Point Types</h4><p>Rust對於浮點數也有兩種原始類型<code>f32</code>和<code>f64</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5.0</span>; <span class="comment">// f64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">f32</span> = <span class="number">3.0</span>; <span class="comment">// f32</span></span><br></pre></td></tr></table></figure><h4 id="The-Boolean-Type"><a href="#The-Boolean-Type" class="headerlink" title="The Boolean Type"></a>The Boolean Type</h4><p>在布林函數中只有對和錯。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y: <span class="built_in">bool</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="The-Character-Type"><a href="#The-Character-Type" class="headerlink" title="The Character Type"></a>The Character Type</h4><p>字元型態中可儲存一個字，如果一個以上就會變成字串。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'A'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">'B'</span>;</span><br></pre></td></tr></table></figure><h4 id="The-Array-Type"><a href="#The-Array-Type" class="headerlink" title="The Array Type"></a>The Array Type</h4><p>利用陣列儲存多筆資料，取用時只需要輸入對應的<code>index</code>就可以了。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> first = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> second = a[<span class="number">1</span>];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-型態&quot;&gt;&lt;a href=&quot;#Rust-型態&quot; class=&quot;headerlink&quot; title=&quot;Rust 型態&quot;&gt;&lt;/a&gt;Rust 型態&lt;/h1&gt;&lt;h4 id=&quot;Integer-Types&quot;&gt;&lt;a href=&quot;#Integer-Types&quot; class=&quot;headerlink&quot; title=&quot;Integer Types&quot;&gt;&lt;/a&gt;Integer Types&lt;/h4&gt;&lt;p&gt;整數是沒有小數部分的數字。以下是在RUST中整數型態的表示方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
  </entry>
  
  <entry>
    <title>Rust 005 Variable</title>
    <link href="https://chucs.github.io/rust-005-variable/"/>
    <id>https://chucs.github.io/rust-005-variable/</id>
    <published>2020-11-09T12:52:30.000Z</published>
    <updated>2020-11-09T13:09:03.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-變量"><a href="#Rust-變量" class="headerlink" title="Rust 變量"></a>Rust 變量</h1><p>在變量中我們可以給予一些固定的值在變數中，而這些值不允許被任意更改。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"Bob"</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"My name is &#123;&#125;."</span>, name);</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ID: <span class="built_in">i32</span> = <span class="number">001</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"My ID is &#123;&#125;."</span>, ID);</span><br></pre></td></tr></table></figure><p>分配多個變量的值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ( a, b ) = (<span class="string">"Alice"</span>, <span class="number">23</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125; is &#123;&#125;."</span>, a, b);</span><br></pre></td></tr></table></figure><p>輸出結果<br><img src="gZqndHG.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-變量&quot;&gt;&lt;a href=&quot;#Rust-變量&quot; class=&quot;headerlink&quot; title=&quot;Rust 變量&quot;&gt;&lt;/a&gt;Rust 變量&lt;/h1&gt;&lt;p&gt;在變量中我們可以給予一些固定的值在變數中，而這些值不允許被任意更改。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;My name is &amp;#123;&amp;#125;.&quot;&lt;/span&gt;, name);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
  </entry>
  
  <entry>
    <title>Rust 004 Format</title>
    <link href="https://chucs.github.io/rust-004-format/"/>
    <id>https://chucs.github.io/rust-004-format/</id>
    <published>2020-11-09T12:50:45.000Z</published>
    <updated>2020-11-09T13:09:03.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-格式化輸出"><a href="#Rust-格式化輸出" class="headerlink" title="Rust 格式化輸出"></a>Rust 格式化輸出</h1><p>格式化輸出可以讓你方便的排版你想要的輸出方式，以下我們介紹幾中常見的格式化輸出。  </p><p>利用大括弧來標示變數所在的地方，由左而右依序輸出。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">"Num: &#123;&#125;, &#123;&#125;"</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>在大括弧內設下index，以照後面資料的順序索取你需要的資料。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;0&#125; is &#123;0&#125; and &#123;1&#125; haha &#123;2&#125;."</span>, <span class="string">"Bob"</span>, <span class="string">"Alice"</span>, <span class="string">"John"</span>);</span><br></pre></td></tr></table></figure><p>在大括弧內設下變數，在後面以變數給予值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;a&#125; is &#123;b&#125; and &#123;c&#125; haha &#123;a&#125;."</span>, b = <span class="string">"Bob"</span>, a = <span class="string">"Alice"</span>, c = <span class="string">"John"</span>);</span><br></pre></td></tr></table></figure><p>依照型態命名，輸出則會以我們所設的型態輸出。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">"Binary: &#123;:b&#125;, Hex: &#123;:x&#125;, Octal: &#123;:o&#125;."</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>輸出結果<br><img src="HgVZM4p.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-格式化輸出&quot;&gt;&lt;a href=&quot;#Rust-格式化輸出&quot; class=&quot;headerlink&quot; title=&quot;Rust 格式化輸出&quot;&gt;&lt;/a&gt;Rust 格式化輸出&lt;/h1&gt;&lt;p&gt;格式化輸出可以讓你方便的排版你想要的輸出方式，以下我們介紹幾中常見的格式化輸出。  &lt;/p&gt;
&lt;p&gt;利用大括弧來標示變數所在的地方，由左而右依序輸出。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Num: &amp;#123;&amp;#125;, &amp;#123;&amp;#125;&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
  </entry>
  
  <entry>
    <title>Rust 003 Function</title>
    <link href="https://chucs.github.io/rust-003-function/"/>
    <id>https://chucs.github.io/rust-003-function/</id>
    <published>2020-11-09T12:21:48.000Z</published>
    <updated>2020-11-09T13:09:03.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-函式"><a href="#Rust-函式" class="headerlink" title="Rust 函式"></a>Rust 函式</h1><p>我們可以在src下創建一個新的檔案<code>print.rs</code>，編寫一下程式。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">run</span></span>()&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello print.rs run!!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然後我們回到主程式來引用我們寫得函式。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> print;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    print::run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著執行就可以看到我們的結果了。</p><p><img src="iMTn529.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-函式&quot;&gt;&lt;a href=&quot;#Rust-函式&quot; class=&quot;headerlink&quot; title=&quot;Rust 函式&quot;&gt;&lt;/a&gt;Rust 函式&lt;/h1&gt;&lt;p&gt;我們可以在src下創建一個新的檔案&lt;code&gt;print.rs&lt;/code&gt;，編寫一下程式。&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;println!&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello print.rs run!!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
  </entry>
  
  <entry>
    <title>Rust 002 Project</title>
    <link href="https://chucs.github.io/rust-002-project/"/>
    <id>https://chucs.github.io/rust-002-project/</id>
    <published>2020-11-09T12:15:13.000Z</published>
    <updated>2020-11-09T13:09:03.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-第一個專案"><a href="#Rust-第一個專案" class="headerlink" title="Rust 第一個專案"></a>Rust 第一個專案</h1><p>安裝完RUST後我們可以開始寫我們第一個RUST得程式了，首先我們先下<code>cargo init</code>這將會替我們創建一些基本的檔案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cargo init</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="uMvHeRj.png" alt=""></p><p>目錄應該是長下面這樣，<code>Cargo.toml</code>裡面寫的是一些設定檔案，版本訊息等等，<code>main.rs</code>則是我們主要寫程式的地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- Cargo.toml</span><br><span class="line">&#96;-- src</span><br><span class="line">    &#96;-- main.rs</span><br></pre></td></tr></table></figure><p>然後打開<code>main.rs</code>編寫我們第一個RUST程式。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著執行程式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cargo run</span><br></pre></td></tr></table></figure><p><img src="J4JlXIU.png" alt=""></p><p>執行完後你會看到你剛剛寫的<code>Hello, world!</code>印在終端機上面。</p><p>如果你不想要執行程式的話可以輸入<code>build</code>就好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cargo build</span><br></pre></td></tr></table></figure><p><img src="vudWD4D.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-第一個專案&quot;&gt;&lt;a href=&quot;#Rust-第一個專案&quot; class=&quot;headerlink&quot; title=&quot;Rust 第一個專案&quot;&gt;&lt;/a&gt;Rust 第一個專案&lt;/h1&gt;&lt;p&gt;安裝完RUST後我們可以開始寫我們第一個RUST得程式了，首先我們先下&lt;code&gt;cargo init&lt;/code&gt;這將會替我們創建一些基本的檔案。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cargo init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust 001 Install</title>
    <link href="https://chucs.github.io/rust-001-install/"/>
    <id>https://chucs.github.io/rust-001-install/</id>
    <published>2020-11-09T12:13:19.000Z</published>
    <updated>2020-11-09T13:09:03.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RUST-介紹與安裝"><a href="#RUST-介紹與安裝" class="headerlink" title="RUST 介紹與安裝"></a>RUST 介紹與安裝</h1><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><p>安全：Rust 擁有豐富類型系統和所有權模型，保證了內存安全性和線程安全性。</p><p>並發：Rust 可讓程序在編譯時並發執行，也就是多個事件在同一時間間隔執行，並且將安全與並發完美統一。</p><p>高效：Rust 快且節省內存。</p><a id="more"></a><h2 id="安裝-RUST"><a href="#安裝-RUST" class="headerlink" title="安裝 RUST"></a>安裝 RUST</h2><p>到<a href="https://www.rust-lang.org/" target="_blank" rel="noopener">RUST</a>的官網按下<code>get started</code>然後你會看到下載畫面，選擇你的作業系統下載對應的下載檔案，通常他會先替你選好。</p><p><img src="E2SfgQY.png" alt=""></p><p>打開你下載好的<code>rustup-init</code>檔案，打開後你會看到他所幫你安裝的路徑等資訊，接著在終端機內輸入1使用預設的安裝。</p><p><img src="MOrVY0n.png" alt=""></p><p>安裝完後可以在終端機輸入<code>rustc --version</code>和<code>cargo --version</code>查看你所安裝版本。</p><p>接下來下載<code>Visual Studio Code</code>，打開後點擊左邊第四個選項來新增RUST套件，新增完後重新載入<code>Visual Studio Code</code>，然後右下角會跳出安裝RUST提醒就直接<code>install</code>。<br><img src="Dt3OZKz.png" alt=""></p><p>新建一個<code>hello.rs</code>然後打開檔案將以下程式碼寫入。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成後打開終端機到檔案下的目錄執行下面的指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rustc hello.rs</span><br><span class="line">$ ./hello</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RUST-介紹與安裝&quot;&gt;&lt;a href=&quot;#RUST-介紹與安裝&quot; class=&quot;headerlink&quot; title=&quot;RUST 介紹與安裝&quot;&gt;&lt;/a&gt;RUST 介紹與安裝&lt;/h1&gt;&lt;h2 id=&quot;優點&quot;&gt;&lt;a href=&quot;#優點&quot; class=&quot;headerlink&quot; title=&quot;優點&quot;&gt;&lt;/a&gt;優點&lt;/h2&gt;&lt;p&gt;安全：Rust 擁有豐富類型系統和所有權模型，保證了內存安全性和線程安全性。&lt;/p&gt;
&lt;p&gt;並發：Rust 可讓程序在編譯時並發執行，也就是多個事件在同一時間間隔執行，並且將安全與並發完美統一。&lt;/p&gt;
&lt;p&gt;高效：Rust 快且節省內存。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Rust tutorials" scheme="https://chucs.github.io/categories/Rust-tutorials/"/>
    
    
      <category term="rust" scheme="https://chucs.github.io/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Parallel Programming MS-MPI install</title>
    <link href="https://chucs.github.io/parallel-001-MS-MPI-install/"/>
    <id>https://chucs.github.io/parallel-001-MS-MPI-install/</id>
    <published>2020-11-09T11:14:25.000Z</published>
    <updated>2020-11-09T13:09:03.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Parallel-Programming-平行程式"><a href="#Parallel-Programming-平行程式" class="headerlink" title="Parallel Programming 平行程式"></a>Parallel Programming 平行程式</h1><p>平行計算是一種類型的計算，許多計算或執行過程是同時進行的。把大問題分為小問題，然後同時解決。以下式建置平行程式環境的流程。</p><a id="more"></a><h2 id="MS-MPI-安裝教學"><a href="#MS-MPI-安裝教學" class="headerlink" title="MS-MPI 安裝教學"></a>MS-MPI 安裝教學</h2><p>首先打開<a href="https://docs.microsoft.com/en-us/message-passing-interface/microsoft-mpi" target="_blank" rel="noopener">MS-MPI</a>然後到下載的地方點擊MS-MPI vxx.x.x，如下圖紫色字體。</p><p><img src="Otdr8uZ.png" alt=""></p><p>接著將所有檔案打勾然後按下一步就會把檔案下載下來了。</p><p><img src="a8jSD2x.png" alt=""></p><p>下載下來後執行並下移步到底，若要更換路徑請自行記得路徑。<br>接著打開Visual Studio 開啟一個C++專案。</p><p><img src="hfmZ9fk.png" alt=""></p><p>點擊右邊專案右鍵，屬性。</p><p><img src="eC9A1o6.png" alt=""></p><p>打開後按<code>C/C++</code>-&gt;<code>其他include目錄</code>，將剛剛按裝好的<code>MPI/Include</code>路徑設好。</p><p><img src="1LVNsYp.png" alt=""></p><p><img src="tXWUuIj.png" alt=""></p><p>建置完後就會產出一個<code>.exe</code>的檔案。</p><p><img src="1q8F8cx.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mpi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rank, <span class="built_in">size</span>;</span><br><span class="line">MPI_Init(&amp;argc, &amp;argv);</span><br><span class="line"></span><br><span class="line">MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</span><br><span class="line">MPI_Comm_size(MPI_COMM_WORLD, &amp;<span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello, World.  I am %d of %d\n"</span>, rank, <span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">MPI_Finalize();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="HKDJrkG.png" alt=""></p><p>將終端機打開<code>source\repos\MpiTest\Debug</code>執行面下指令(這個路徑是你的專案路徑，因此可能會有所不同)，你就會看到下圖結果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mpiexec -n 4 MpiTest.exe</span><br></pre></td></tr></table></figure><p>若無此指令請確認環境變數是否有設定完成。<br><img src="aXnvwD9.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Parallel-Programming-平行程式&quot;&gt;&lt;a href=&quot;#Parallel-Programming-平行程式&quot; class=&quot;headerlink&quot; title=&quot;Parallel Programming 平行程式&quot;&gt;&lt;/a&gt;Parallel Programming 平行程式&lt;/h1&gt;&lt;p&gt;平行計算是一種類型的計算，許多計算或執行過程是同時進行的。把大問題分為小問題，然後同時解決。以下式建置平行程式環境的流程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Parallel Programming" scheme="https://chucs.github.io/categories/Parallel-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces 1426D</title>
    <link href="https://chucs.github.io/Non-zero-Segments/"/>
    <id>https://chucs.github.io/Non-zero-Segments/</id>
    <published>2020-10-03T07:10:30.000Z</published>
    <updated>2020-10-16T15:26:49.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-1426D-Non-zero-Segments"><a href="#Codeforces-1426D-Non-zero-Segments" class="headerlink" title="Codeforces 1426D - Non-zero Segments"></a>Codeforces 1426D - Non-zero Segments</h1><p><a href="https://codeforces.com/problemset/problem/1426/D" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>Kolya有一陣列a，裡面數字有正有負，因為Kolya不喜歡0所以不包含0，Kolya也不喜歡子陣列中的總合為0(子陣列為一個連續的範圍)。<br>你要幫Kolya調整陣列使得任意子陣列總和不為0，你可以在陣列中的任一位置插入任意數字，就算數字超過可顯示範圍也行，請找出「最少」需要插入的數字的次數。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>需要從a<sub>i</sub>加到a<sub>j</sub>, (i &lt; j)來確認總和，因此是個前綴和的問題，從開頭開始加，用map紀錄出現過的總和，對每次的總和作判斷，如果前面出現過相同的總和代表在這區間中有子陣列總和為0，例: a=[8 5 -5]，子陣列總和=[8 13 8]，8重複出現可以發現因為有子陣列[5 -5]總和為0的關係，因此這區間需要插入一個數，因為插入一個數的關係，所以左邊的區間總和不會出現0，因此出現過的總和(map)需要重置，重新計算總和。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/zxzxcc112/cb5049de13da8958e88679cb0375f3ac.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Codeforces-1426D-Non-zero-Segments&quot;&gt;&lt;a href=&quot;#Codeforces-1426D-Non-zero-Segments&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1426D - Non-zero Segments&quot;&gt;&lt;/a&gt;Codeforces 1426D - Non-zero Segments&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1426/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;Kolya有一陣列a，裡面數字有正有負，因為Kolya不喜歡0所以不包含0，Kolya也不喜歡子陣列中的總合為0(子陣列為一個連續的範圍)。&lt;br&gt;你要幫Kolya調整陣列使得任意子陣列總和不為0，你可以在陣列中的任一位置插入任意數字，就算數字超過可顯示範圍也行，請找出「最少」需要插入的數字的次數。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Codeforces" scheme="https://chucs.github.io/categories/Codeforces/"/>
    
    
      <category term="sortings" scheme="https://chucs.github.io/tags/sortings/"/>
    
      <category term="greedy" scheme="https://chucs.github.io/tags/greedy/"/>
    
      <category term="constructive algorithms" scheme="https://chucs.github.io/tags/constructive-algorithms/"/>
    
      <category term="data structures" scheme="https://chucs.github.io/tags/data-structures/"/>
    
      <category term="1500" scheme="https://chucs.github.io/tags/1500/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1426C</title>
    <link href="https://chucs.github.io/Increase-and-Copy/"/>
    <id>https://chucs.github.io/Increase-and-Copy/</id>
    <published>2020-10-03T07:10:14.000Z</published>
    <updated>2020-10-16T15:26:49.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-1426C-Increase-and-Copy"><a href="#Codeforces-1426C-Increase-and-Copy" class="headerlink" title="Codeforces 1426C - Increase and Copy"></a>Codeforces 1426C - Increase and Copy</h1><p><a href="https://codeforces.com/problemset/problem/1426/C" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>你有一陣列a，一開始只有一個元素1(a = [1])，每次動作你能做以下一種事:<br>1.對a中其中一個元素+1<br>2.對a中其中一個元素做複製，並放在陣列最後面<br>你要找出「最小」次數的動作讓陣列a裡的元素總和至少為n。</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>要次數最小，所以一次動作加越多數字越好，因此應該是先+1到某個數字後在做複製，根據數學可以知道某數的平方數字最大(算幾)，也會發現執行動作次數最少，所以要加到sqrt(n)之後作複製到超過n所需的次數。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/zxzxcc112/6e6e6cc5ae4c3bd72ddfc6b89c8d648b.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Codeforces-1426C-Increase-and-Copy&quot;&gt;&lt;a href=&quot;#Codeforces-1426C-Increase-and-Copy&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1426C - Increase and Copy&quot;&gt;&lt;/a&gt;Codeforces 1426C - Increase and Copy&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1426/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;你有一陣列a，一開始只有一個元素1(a = [1])，每次動作你能做以下一種事:&lt;br&gt;1.對a中其中一個元素+1&lt;br&gt;2.對a中其中一個元素做複製，並放在陣列最後面&lt;br&gt;你要找出「最小」次數的動作讓陣列a裡的元素總和至少為n。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Codeforces" scheme="https://chucs.github.io/categories/Codeforces/"/>
    
    
      <category term="math" scheme="https://chucs.github.io/tags/math/"/>
    
      <category term="binary search" scheme="https://chucs.github.io/tags/binary-search/"/>
    
      <category term="constructive algorithms" scheme="https://chucs.github.io/tags/constructive-algorithms/"/>
    
      <category term="1100" scheme="https://chucs.github.io/tags/1100/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1426B</title>
    <link href="https://chucs.github.io/Symmetric-Matrix/"/>
    <id>https://chucs.github.io/Symmetric-Matrix/</id>
    <published>2020-10-03T07:09:56.000Z</published>
    <updated>2020-10-16T15:26:49.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-1426B-Symmetric-Matrix"><a href="#Codeforces-1426B-Symmetric-Matrix" class="headerlink" title="Codeforces 1426B - Symmetric Matrix"></a>Codeforces 1426B - Symmetric Matrix</h1><p><a href="https://codeforces.com/problemset/problem/1426/B" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>Masha有n種類型2x2大小的磁磚，磁磚上每格各有一個數字，Masha想利用這幾種磁磚組成mxm的矩形(可用任意種類與任意數量組成)，然後Masha希望這個矩形上的數字是對稱的–對任一對位置(i,j)要符合s[i][j] = s[j][i]，請問Masha有辦法組成他想要的矩形嗎?</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>當m為奇數就不可能用2x2組成，觀察後可以發現當磁磚右上與左下數字相同必能符合對稱條件，反之則不符合對稱條件，因此在n種磁磚中有一種右上左下數字相同就能組成。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/zxzxcc112/bded1c9c1f388bf6a4f1a331a2a08147.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Codeforces-1426B-Symmetric-Matrix&quot;&gt;&lt;a href=&quot;#Codeforces-1426B-Symmetric-Matrix&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1426B - Symmetric Matrix&quot;&gt;&lt;/a&gt;Codeforces 1426B - Symmetric Matrix&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1426/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;Masha有n種類型2x2大小的磁磚，磁磚上每格各有一個數字，Masha想利用這幾種磁磚組成mxm的矩形(可用任意種類與任意數量組成)，然後Masha希望這個矩形上的數字是對稱的–對任一對位置(i,j)要符合s[i][j] = s[j][i]，請問Masha有辦法組成他想要的矩形嗎?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Codeforces" scheme="https://chucs.github.io/categories/Codeforces/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
      <category term="900" scheme="https://chucs.github.io/tags/900/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1426A</title>
    <link href="https://chucs.github.io/Floor-Number/"/>
    <id>https://chucs.github.io/Floor-Number/</id>
    <published>2020-10-03T07:09:35.000Z</published>
    <updated>2020-10-16T15:26:49.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-1426A-Floor-Number"><a href="#Codeforces-1426A-Floor-Number" class="headerlink" title="Codeforces 1426A - Floor Number"></a>Codeforces 1426A - Floor Number</h1><p><a href="https://codeforces.com/problemset/problem/1426/A" target="_blank" rel="noopener">題目網址</a></p><h4 id="題意"><a href="#題意" class="headerlink" title="題意:"></a>題意:</h4><p>Vasya拜訪Petya，Petya在公寓的第n號房間，公寓裡第一層房間為1號、2號，第二層開始每層有x間房間，請問Petya的房間在第幾層?</p><a id="more"></a><h4 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h4><p>根據題目公式計算n在哪個區間，並進行樓層計算。</p><h4 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼:"></a>程式碼:</h4><script src="https://gist.github.com/zxzxcc112/0e7813a59b9e23c50d8364af4c850a65.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Codeforces-1426A-Floor-Number&quot;&gt;&lt;a href=&quot;#Codeforces-1426A-Floor-Number&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1426A - Floor Number&quot;&gt;&lt;/a&gt;Codeforces 1426A - Floor Number&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1426/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;題目網址&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;題意&quot;&gt;&lt;a href=&quot;#題意&quot; class=&quot;headerlink&quot; title=&quot;題意:&quot;&gt;&lt;/a&gt;題意:&lt;/h4&gt;&lt;p&gt;Vasya拜訪Petya，Petya在公寓的第n號房間，公寓裡第一層房間為1號、2號，第二層開始每層有x間房間，請問Petya的房間在第幾層?&lt;/p&gt;
    
    </summary>
    
    
      <category term="Codeforces" scheme="https://chucs.github.io/categories/Codeforces/"/>
    
    
      <category term="implementation" scheme="https://chucs.github.io/tags/implementation/"/>
    
      <category term="math" scheme="https://chucs.github.io/tags/math/"/>
    
      <category term="800" scheme="https://chucs.github.io/tags/800/"/>
    
  </entry>
  
</feed>
