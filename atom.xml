<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHUPCCA</title>
  
  <subtitle>解題報告</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chucs.github.io/"/>
  <updated>2021-09-30T03:51:28.503Z</updated>
  <id>https://chucs.github.io/</id>
  
  <author>
    <name>CHUPCCA</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2021 iThome 鐵人賽 - 30天 Flutter 日常</title>
    <link href="https://chucs.github.io/2021-iThome-Flutter/"/>
    <id>https://chucs.github.io/2021-iThome-Flutter/</id>
    <published>2021-09-06T09:20:11.000Z</published>
    <updated>2021-09-30T03:51:28.503Z</updated>
    
    <content type="html"><![CDATA[<p>30天學會基本元件與專案架構，從杯麵魚板進化成火鍋魚板。</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10258878" target="_blank" rel="noopener">2021 iThome 鐵人賽 - 30天 Flutter 日常</a></li></ul><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵本次的教學前面都是基本的元件為主，後面會利用前面所學以DDD(Domain Driven Design)的架構來實作一個App。</p><h3 id="Flutter-好處"><a href="#Flutter-好處" class="headerlink" title="Flutter 好處"></a>Flutter 好處</h3><p>Flutter 可以使用同一個程式碼進行跨平台開發，並將開發出來的 App 部署在 iOS、Android、Web，而在眾多跨平台開發架構中 Flutter 的效能又是最為出眾的。</p><h3 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h3><ul><li><a href="https://ithelp.ithome.com.tw/articles/10258878" target="_blank" rel="noopener">[Day1] Flutter - 簡介</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10258903" target="_blank" rel="noopener">[Day2] Flutter - 建置環境</a></li></ul><h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><ul><li><a href="https://ithelp.ithome.com.tw/articles/10258922" target="_blank" rel="noopener">[Day3] Flutter - 改變容器風格 ( Container )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259148" target="_blank" rel="noopener">[Day4] Flutter - 水平佈局容器 ( Row )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259151" target="_blank" rel="noopener">[Day5] Flutter - 垂直佈局容器 ( Column )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259312" target="_blank" rel="noopener">[Day6] Flutter - 堆疊佈局容器 ( Stack、Positioned )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259154" target="_blank" rel="noopener">[Day7] Flutter - 置中容器 ( Center )</a></li></ul><h4 id="元件"><a href="#元件" class="headerlink" title="元件"></a>元件</h4><ul><li><a href="https://ithelp.ithome.com.tw/articles/10259465" target="_blank" rel="noopener">[Day8] Flutter - 顯示文字元件 ( Text )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259474" target="_blank" rel="noopener">[Day9] Flutter - 按鈕元件 ( Button )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259503" target="_blank" rel="noopener">[Day10] Flutter - 文字輸入元件 ( TextField )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259523" target="_blank" rel="noopener">[Day11] Flutter - StatelessWidget &amp; StatfulWidget 差別</a></li></ul><h4 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h4><ul><li><a href="https://ithelp.ithome.com.tw/articles/10259531" target="_blank" rel="noopener">[Day12] Flutter - 場景路徑與轉換 ( Auto Router )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259564" target="_blank" rel="noopener">[Day13] Flutter - 管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259641" target="_blank" rel="noopener">[Day14] Flutter - 怎麼串接API ( Http )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259644" target="_blank" rel="noopener">[Day15] Flutter - 大海撈針不是辦法 ( Dartz )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259691" target="_blank" rel="noopener">[Day16] Flutter - Firebase Authentication &amp; Google Sign-In ( IOS &amp; Android )</a></li></ul><h4 id="專案"><a href="#專案" class="headerlink" title="專案"></a>專案</h4><ul><li><a href="https://ithelp.ithome.com.tw/articles/10259714" target="_blank" rel="noopener">[Day17] Flutter - Architecture: Domain Driven Design (part1)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260149" target="_blank" rel="noopener">[Day18] Flutter - Environment (part2)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260154" target="_blank" rel="noopener">[Day19] Flutter - Const: Shared (part3)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260163" target="_blank" rel="noopener">[Day20] Flutter - Theme: Dark mode &amp; Light mode (part4)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260200" target="_blank" rel="noopener">[Day21] Flutter - Presentation AutoRouter (part5)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260203" target="_blank" rel="noopener">[Day22] Flutter - Infrastructure Authentication (part6)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260206" target="_blank" rel="noopener">[Day23] Flutter - Domain Error Handle (part7)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260244" target="_blank" rel="noopener">[Day24] Flutter - Application Login (part8)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260246" target="_blank" rel="noopener">[Day25] Flutter - Application Authentication (part9)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260253" target="_blank" rel="noopener">[Day26] Flutter - Presentation Login &amp; Splash Screen (part10)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260259" target="_blank" rel="noopener">[Day27] Flutter - Infrastructure Click Game (part11)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260263" target="_blank" rel="noopener">[Day28] Flutter - Application Click Game (part12)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260266" target="_blank" rel="noopener">[Day29] Flutter - Presentation Click Game Screen (part13)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10260575" target="_blank" rel="noopener">[Day30] Flutter - Flutter App Icon (part14)</a></li></ul><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>即便熟悉原生，但擴展自己的技能樹不會有壞處。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;30天學會基本元件與專案架構，從杯麵魚板進化成火鍋魚板。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10258878&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2021 iThome 鐵人賽 - 30天 Flutter 日常&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
      <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Swift 019 Polymorphism and Typecasting</title>
    <link href="https://chucs.github.io/swift-019-polymorphism-and-typecasting/"/>
    <id>https://chucs.github.io/swift-019-polymorphism-and-typecasting/</id>
    <published>2021-01-22T05:32:51.000Z</published>
    <updated>2021-01-22T05:44:29.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="類別繼承"><a href="#類別繼承" class="headerlink" title="類別繼承"></a>類別繼承</h1><p>我們可以先創造一個專輯的類別來定義最基本的屬性，之後我們可以將其他各種專輯繼承專輯這個類別，而當我們創建完後，由於都是屬於專輯的類別，因此可以完美且快速的定義在一起。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudioAlbum</span>: <span class="title">Album</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> studio: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, studio: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.studio = studio</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiveAlbum</span>: <span class="title">Album</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> location: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, location: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.location = location</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apple = <span class="type">StudioAlbum</span>(name: <span class="string">"Apple"</span>, studio: <span class="string">"Pie"</span>)</span><br><span class="line"><span class="keyword">var</span> banana = <span class="type">StudioAlbum</span>(name: <span class="string">"Banana"</span>, studio: <span class="string">"ship"</span>)</span><br><span class="line"><span class="keyword">var</span> pear = <span class="type">LiveAlbum</span>(name: <span class="string">"Pear"</span>, location: <span class="string">"taiwan"</span>)</span><br><span class="line"><span class="keyword">var</span> allAlbums: [<span class="type">Album</span>] = [apple, banana, pear]</span><br></pre></td></tr></table></figure><p>我們可以透過定義getPerformance之後再使用override進行修改，之後我們可以快速的將所有的getPerformance快速的列印出來。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlbumGod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getPerformance</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The album is \(name)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudioAlbumGod</span>: <span class="title">AlbumGod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> studio: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, studio: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.studio = studio</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">getPerformance</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The studio album is \(name)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LiveAlbumGod</span>: <span class="title">AlbumGod</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> location: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, location: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.location = location</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">getPerformance</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The live album is \(name)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appleGod = <span class="type">StudioAlbumGod</span>(name: <span class="string">"Apple"</span>, studio: <span class="string">"Pie"</span>)</span><br><span class="line"><span class="keyword">var</span> bananaGod = <span class="type">StudioAlbumGod</span>(name: <span class="string">"Banana"</span>, studio: <span class="string">"ship"</span>)</span><br><span class="line"><span class="keyword">var</span> pearGod = <span class="type">LiveAlbumGod</span>(name: <span class="string">"Pear"</span>, location: <span class="string">"taiwan"</span>)</span><br><span class="line"><span class="keyword">var</span> allAlbumGods: [<span class="type">AlbumGod</span>] = [appleGod, bananaGod, pearGod]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> albumGod <span class="keyword">in</span> allAlbumGods &#123;</span><br><span class="line">    <span class="built_in">print</span>(albumGod.getPerformance())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;類別繼承&quot;&gt;&lt;a href=&quot;#類別繼承&quot; class=&quot;headerlink&quot; title=&quot;類別繼承&quot;&gt;&lt;/a&gt;類別繼承&lt;/h1&gt;&lt;p&gt;我們可以先創造一個專輯的類別來定義最基本的屬性，之後我們可以將其他各種專輯繼承專輯這個類別，而當我們創建完後，由於都是屬於專輯的類別，因此可以完美且快速的定義在一起。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 018 Access Control</title>
    <link href="https://chucs.github.io/swift-018-access-control/"/>
    <id>https://chucs.github.io/swift-018-access-control/</id>
    <published>2021-01-22T05:32:24.000Z</published>
    <updated>2021-01-22T05:44:28.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="類別屬性限制"><a href="#類別屬性限制" class="headerlink" title="類別屬性限制"></a>類別屬性限制</h1><p>在創建類別時我們有時候會給屬性一些限制。public意味著每個人都可以在內部讀取和寫入屬性。private只有內部可以使用，也是最嚴格的限制。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="type">Int?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;類別屬性限制&quot;&gt;&lt;a href=&quot;#類別屬性限制&quot; class=&quot;headerlink&quot; title=&quot;類別屬性限制&quot;&gt;&lt;/a&gt;類別屬性限制&lt;/h1&gt;&lt;p&gt;在創建類別時我們有時候會給屬性一些限制。public意味著每個人都可以在內部讀取和寫入屬性。private只有內部可以使用，也是最嚴格的限制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 017 Static Properties and Methods</title>
    <link href="https://chucs.github.io/swift-017-static-properties-and-methods/"/>
    <id>https://chucs.github.io/swift-017-static-properties-and-methods/</id>
    <published>2021-01-22T05:32:08.000Z</published>
    <updated>2021-01-22T05:44:27.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="靜態屬性"><a href="#靜態屬性" class="headerlink" title="靜態屬性"></a>靜態屬性</h1><p>Static可以讓你創建一個靜態的屬性，他可以快速儲存共享數據，不需要先創建一個類別才能使用。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> favoriteColor = <span class="string">"Red"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myCat = <span class="type">Cat</span>(name: <span class="string">"dodo"</span>, age: <span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(Cat.favoriteColor)"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;靜態屬性&quot;&gt;&lt;a href=&quot;#靜態屬性&quot; class=&quot;headerlink&quot; title=&quot;靜態屬性&quot;&gt;&lt;/a&gt;靜態屬性&lt;/h1&gt;&lt;p&gt;Static可以讓你創建一個靜態的屬性，他可以快速儲存共享數據，不需要先創建一個類別才能使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 016 Properties</title>
    <link href="https://chucs.github.io/swift-016-properties/"/>
    <id>https://chucs.github.io/swift-016-properties/</id>
    <published>2021-01-22T05:31:48.000Z</published>
    <updated>2021-01-22T05:44:25.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><p>我們可以在struct中設置一些程式，讓他告訴我們修改了什麼資料。而在swift中提供了willSet和didSet兩個可以使用，在willSet中預設的變數名稱是newValue，didSet中預設的變數名稱是oldValue，一個是先做一個是後做，你可以根據你的喜好選則使用。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clothes: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            update(msg: <span class="string">"I'm changing from \(clothes) to \(newValue)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            update(msg: <span class="string">"I just changed from \(oldValue) to \(clothes)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(msg: String)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> k = <span class="type">Person</span>(clothes:  <span class="string">"T-shirts"</span>)</span><br><span class="line">k.clothes = <span class="string">"K-shirts"</span></span><br></pre></td></tr></table></figure><p>想要對一個變數進行修改的話可以使用get，這將會得到age後進行修改。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> ageInPersonYears: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age * <span class="number">7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="type">Cat</span>(age: <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">cat.age</span><br><span class="line">cat.ageInPersonYears</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Properties&quot;&gt;&lt;a href=&quot;#Properties&quot; class=&quot;headerlink&quot; title=&quot;Properties&quot;&gt;&lt;/a&gt;Properties&lt;/h1&gt;&lt;p&gt;我們可以在struct中設置一些程式，讓他告訴我們修改了什麼資料。而在swift中提供了willSet和didSet兩個可以使用，在willSet中預設的變數名稱是newValue，didSet中預設的變數名稱是oldValue，一個是先做一個是後做，你可以根據你的喜好選則使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 015 Classes</title>
    <link href="https://chucs.github.io/swift-015-classes/"/>
    <id>https://chucs.github.io/swift-015-classes/</id>
    <published>2021-01-22T05:31:29.000Z</published>
    <updated>2021-01-22T05:44:39.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="類別"><a href="#類別" class="headerlink" title="類別"></a>類別</h1><p>在創建類別後，我們必須初始化程式，將我們的屬性提供值，有幾種可以給定預設的值，一種是直接他們默認的值，或者我們自己寫一個初始化程式，而我們自己寫一個初始化得程式是比較聰明的選擇，init是內建的一個初始化方法，我們可以在裡面初始我們的宣告的屬性等。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clothes: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> shoes: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(clothes: <span class="type">String</span>, shoes: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.clothes = clothes</span><br><span class="line">        <span class="keyword">self</span>.shoes = shoes</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這邊我們創造一個狗的類別，這裡面包含他的名字和顏色的訊息，而我們還可以在這個類別寫一個函式狗的聲音，我們可以將著一包類別重複的使用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, color: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.color = color</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">Sing</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"dog dog dog!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myDog = <span class="type">Dog</span>(name: <span class="string">"Kor"</span>, color: <span class="string">"blue"</span>)</span><br><span class="line">myDog.name</span><br><span class="line">myDog.color</span><br><span class="line">myDog.<span class="type">Sing</span>()</span><br></pre></td></tr></table></figure><p>當我們想要建立更大一個類別時我們可以在創建一個類別，我們可以繼承類別。如果我們想要修改參數的話可以使用<code>override</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigDog</span>: <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">Sing</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"BigDog BigDog BigDog"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myBigDog = <span class="type">BigDog</span>(name: <span class="string">"Kor"</span>, color: <span class="string">"blue"</span>)</span><br><span class="line">myBigDog.name</span><br><span class="line">myBigDog.color</span><br><span class="line">myBigDog.<span class="type">Sing</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;類別&quot;&gt;&lt;a href=&quot;#類別&quot; class=&quot;headerlink&quot; title=&quot;類別&quot;&gt;&lt;/a&gt;類別&lt;/h1&gt;&lt;p&gt;在創建類別後，我們必須初始化程式，將我們的屬性提供值，有幾種可以給定預設的值，一種是直接他們默認的值，或者我們自己寫一個初始化程式，而我們自己寫一個初始化得程式是比較聰明的選擇，init是內建的一個初始化方法，我們可以在裡面初始我們的宣告的屬性等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 014 Structs</title>
    <link href="https://chucs.github.io/swift-014-structs/"/>
    <id>https://chucs.github.io/swift-014-structs/</id>
    <published>2021-01-22T05:31:13.000Z</published>
    <updated>2021-01-22T05:44:42.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h1><p><code>Struct</code>可以將多個元素包裝再一起，一但創建了結構，就可以通過下面方式讀取對應屬性。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pointA = <span class="type">Point</span>(x: <span class="number">1</span>, y: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> pointB = <span class="type">Point</span>(x: <span class="number">3</span>, y: <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(pointA.x)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(pointA.y)"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;結構&quot;&gt;&lt;a href=&quot;#結構&quot; class=&quot;headerlink&quot; title=&quot;結構&quot;&gt;&lt;/a&gt;結構&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Struct&lt;/code&gt;可以將多個元素包裝再一起，一但創建了結構，就可以通過下面方式讀取對應屬性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 013 Enumerations</title>
    <link href="https://chucs.github.io/swift-013-enumerations/"/>
    <id>https://chucs.github.io/swift-013-enumerations/</id>
    <published>2021-01-22T05:30:56.000Z</published>
    <updated>2021-01-22T05:44:45.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h1><p>在使用一些函式的時候，我們有時會會不小心給錯輸入的值而產生粗心的錯誤，有可能大小寫不對、全形半形導致錯誤找了很久才找到，為了避免這個錯誤我們可以使用<code>enum</code>先定義好這個輸入的型態，如果在這個型態之外我們就會產生警告，以下是還未使用<code>enum</code>時的寫法。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStatusNoEnum</span><span class="params">(weather: String)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> weather == <span class="string">"sunny"</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Good"</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>enum</code>後將可以完全的避免掉粗心的錯誤。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStatus</span><span class="params">(weather: WeatherType)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> weather == <span class="type">WeatherType</span>.sun &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Good"</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getHaterStatus(weather: <span class="type">WeatherType</span>.cloud)</span><br></pre></td></tr></table></figure><p>你還可以將輸入化簡，讓程式碼簡潔乾淨。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStatusSwitch</span><span class="params">(weather: WeatherType)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> weather &#123;</span><br><span class="line">    <span class="keyword">case</span> .sun:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Sun!"</span></span><br><span class="line">    <span class="keyword">case</span> .cloud:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Cloud"</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStatusSwitch(weather: .cloud)</span><br></pre></td></tr></table></figure><p>當然如果你有需要你可以在enum中定義參數的型態，在調用時將會出現你所定義的變數名稱，。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">speedType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> one</span><br><span class="line">    <span class="keyword">case</span> two</span><br><span class="line">    <span class="keyword">case</span> three(speed: <span class="type">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getStatusSpeed</span><span class="params">(speed: speedType)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> speed &#123;</span><br><span class="line">    <span class="keyword">case</span> .one:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"one!"</span></span><br><span class="line">    <span class="keyword">case</span> .two:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"two!"</span></span><br><span class="line">    <span class="keyword">case</span> .three(<span class="keyword">let</span> speed) <span class="keyword">where</span> speed &gt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"three &gt; 10"</span></span><br><span class="line">    <span class="keyword">case</span> .three(<span class="keyword">let</span> speed) <span class="keyword">where</span> speed &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"three &lt; 10"</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">getStatusSpeed(speed: .three(speed: <span class="number">11</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Enum&quot;&gt;&lt;a href=&quot;#Enum&quot; class=&quot;headerlink&quot; title=&quot;Enum&quot;&gt;&lt;/a&gt;Enum&lt;/h1&gt;&lt;p&gt;在使用一些函式的時候，我們有時會會不小心給錯輸入的值而產生粗心的錯誤，有可能大小寫不對、全形半形導致錯誤找了很久才找到，為了避免這個錯誤我們可以使用&lt;code&gt;enum&lt;/code&gt;先定義好這個輸入的型態，如果在這個型態之外我們就會產生警告，以下是還未使用&lt;code&gt;enum&lt;/code&gt;時的寫法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 012 Optional Chaining</title>
    <link href="https://chucs.github.io/swift-012-optional-chaining/"/>
    <id>https://chucs.github.io/swift-012-optional-chaining/</id>
    <published>2021-01-22T05:30:37.000Z</published>
    <updated>2021-01-22T05:44:47.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可選中的問號與驚嘆號"><a href="#可選中的問號與驚嘆號" class="headerlink" title="可選中的問號與驚嘆號"></a>可選中的問號與驚嘆號</h1><p>您可以通過在要調用其屬性的方法或下標的可選值之後放置問號（?）來指定可選，如果可選值不是<code>nil</code>即可使用。這非常類似於將感嘆號（!）放在可選值之後以強制展開其值。主要區別在於，問號時會正常失敗<code>nil</code>。驚嘆號會強制展開會觸發運行時錯誤<code>nil</code>。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloYear</span><span class="params">(year: Int)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> year &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2020</span>: <span class="keyword">return</span> <span class="string">"Hello 2020"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2021</span>: <span class="keyword">return</span> <span class="string">"Hello 2021"</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg = helloYear(year: <span class="number">2020</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(msg) swift!"</span>)</span><br></pre></td></tr></table></figure><p>如果我們要再回傳回來的參數後面使用一些函式來改變參數的時候，我們可以加上<code>?</code>來確保是否有參數可以調用，如果是<code>nil</code>將會出現錯誤訊息。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloYear2</span><span class="params">(year: Int)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> year &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2020</span>: <span class="keyword">return</span> <span class="string">"Hello 2020"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2021</span>: <span class="keyword">return</span> <span class="string">"Hello 2021"</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg2 = helloYear2(year: <span class="number">203</span>)?.uppercased()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(msg2) swift!"</span>)</span><br></pre></td></tr></table></figure><p>如果想讓程式碼更加的安全，可以在後面加上<code>??</code>，當參數為<code>nil</code>時，將會使用<code>??</code>後面所設置的參數。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloYear2</span><span class="params">(year: Int)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> year &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2020</span>: <span class="keyword">return</span> <span class="string">"Hello 2020"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2021</span>: <span class="keyword">return</span> <span class="string">"Hello 2021"</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg2 = helloYear2(year: <span class="number">203</span>) ?? <span class="string">"unknown"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(msg2) swift!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;可選中的問號與驚嘆號&quot;&gt;&lt;a href=&quot;#可選中的問號與驚嘆號&quot; class=&quot;headerlink&quot; title=&quot;可選中的問號與驚嘆號&quot;&gt;&lt;/a&gt;可選中的問號與驚嘆號&lt;/h1&gt;&lt;p&gt;您可以通過在要調用其屬性的方法或下標的可選值之後放置問號（?）來指定可選，如果可選值不是&lt;code&gt;nil&lt;/code&gt;即可使用。這非常類似於將感嘆號（!）放在可選值之後以強制展開其值。主要區別在於，問號時會正常失敗&lt;code&gt;nil&lt;/code&gt;。驚嘆號會強制展開會觸發運行時錯誤&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 011 Optionals</title>
    <link href="https://chucs.github.io/swift-011-optionals/"/>
    <id>https://chucs.github.io/swift-011-optionals/</id>
    <published>2021-01-22T05:30:19.000Z</published>
    <updated>2021-01-22T05:44:50.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可選"><a href="#可選" class="headerlink" title="可選"></a>可選</h1><p>如果在不知道可選的元素是什麼的情形下，我們可以利用?來代表有可能是空的值，接著我們利用if let 的方式判斷，如果是nil就會跳掉else。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myNameIs</span><span class="params">(name: String)</span></span> -&gt; <span class="type">String?</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">"joy"</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Good"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s : <span class="type">String?</span></span><br><span class="line">s = myNameIs(name: <span class="string">"davis"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> a = myNameIs(name: <span class="string">"davis"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(a)"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Is nil!!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;可選&quot;&gt;&lt;a href=&quot;#可選&quot; class=&quot;headerlink&quot; title=&quot;可選&quot;&gt;&lt;/a&gt;可選&lt;/h1&gt;&lt;p&gt;如果在不知道可選的元素是什麼的情形下，我們可以利用?來代表有可能是空的值，接著我們利用if let 的方式判斷，如果是nil就會跳掉else。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 010 Functions</title>
    <link href="https://chucs.github.io/swift-010-functions/"/>
    <id>https://chucs.github.io/swift-010-functions/</id>
    <published>2021-01-22T05:30:00.000Z</published>
    <updated>2021-01-22T05:44:54.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函式"><a href="#函式" class="headerlink" title="函式"></a>函式</h1><p>函式可以幫助你將程式的區塊給打包，打包後的程式你可以重複使用，可以增加可讀性與簡潔等。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myfunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I like func!!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">myfunc()</span><br></pre></td></tr></table></figure><p>由於函式中的變數與主程式中的變數是分開的，因為在每個區域都有自己的變數，因此我們可以把變數傳入函式中來取的外部的變數。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myProfilefunc</span><span class="params">(name: String, age: Int)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"My name is \(name), age is \(age)!!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">myProfilefunc(name: <span class="string">"Davis"</span>, age: <span class="number">22</span>)</span><br></pre></td></tr></table></figure><p>在變數宣告中我們可以改變輸入的名稱，前面的變數代表外面使得這個函式所使用的名稱，後面的則是函式內所使用的名稱。而第二種方法則是給他一個底線，這個底線代表任何，所以外面也不需要輸入變數名稱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func myProfilefunc(myName name: String, myAge age: Int) &#123;</span><br><span class="line">    print(&quot;My name is \(name), age is \(age)!!&quot;)</span><br><span class="line">&#125;</span><br><span class="line">myProfilefunc(myName: &quot;Emily&quot;, myAge: 20)</span><br><span class="line"></span><br><span class="line">func myProfilefunc(_ name: String, _ age: Int) &#123;</span><br><span class="line">    print(&quot;My name is \(name), age is \(age)!!&quot;)</span><br><span class="line">&#125;</span><br><span class="line">myProfilefunc(&quot;Joy&quot;, 13)</span><br></pre></td></tr></table></figure><p>在函式中我們有時候必須將計算完的變數回傳回主程式，就如我們剛剛所說過的每個區域都有自己的變數，因此主程式並不會拿到函式中的變數。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">piArea</span><span class="params">(r: Float)</span></span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> pi: <span class="type">Float</span> = <span class="number">3.14</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pi * r * r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Area: \(piArea(r: 3))"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函式&quot;&gt;&lt;a href=&quot;#函式&quot; class=&quot;headerlink&quot; title=&quot;函式&quot;&gt;&lt;/a&gt;函式&lt;/h1&gt;&lt;p&gt;函式可以幫助你將程式的區塊給打包，打包後的程式你可以重複使用，可以增加可讀性與簡潔等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 009 Switch Case</title>
    <link href="https://chucs.github.io/swift-009-switch-case/"/>
    <id>https://chucs.github.io/swift-009-switch-case/</id>
    <published>2021-01-22T05:29:42.000Z</published>
    <updated>2021-01-22T05:44:58.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="選擇"><a href="#選擇" class="headerlink" title="選擇"></a>選擇</h1><p>在判斷中switch可以判斷你給他的一個變量做對應的case，當他完成後他會退出那個case得區塊。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> caseNum = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> caseNum &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Your case number is \(caseNum)"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Your case number is \(caseNum)"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Your case number is \(caseNum)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Out of case!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在case中設置一個範圍來，只要在範圍中的都屬於那個case。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> caseNumNum = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> caseNumNum &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>...<span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Your case number is \(caseNumNum)"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>...<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Your case number is \(caseNumNum)"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>...<span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Your case number is \(caseNumNum)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Out of case!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;選擇&quot;&gt;&lt;a href=&quot;#選擇&quot; class=&quot;headerlink&quot; title=&quot;選擇&quot;&gt;&lt;/a&gt;選擇&lt;/h1&gt;&lt;p&gt;在判斷中switch可以判斷你給他的一個變量做對應的case，當他完成後他會退出那個case得區塊。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 008 Loop</title>
    <link href="https://chucs.github.io/swift-008-loop/"/>
    <id>https://chucs.github.io/swift-008-loop/</id>
    <published>2021-01-22T05:29:21.000Z</published>
    <updated>2021-01-22T05:45:00.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h1><p>迴圈是為了解決重複的事情時所建構的，我們可以簡單地使用迴圈來幫助我們減少程式碼中重複的動作。例如我們可以將下面的重複動作簡化成一個簡單的回圈。</p><a id="more"></a><p>未使用回圈：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"1 x 1 is \(1 * 1)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"1 x 2 is \(1 * 2)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"1 x 3 is \(1 * 3)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"1 x 4 is \(1 * 4)"</span>)</span><br></pre></td></tr></table></figure><p>使用回圈後：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">4</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"1 x \(i) is \(1 * i)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了自己設定回圈範圍外，我們可以將資料放入設置迴圈數的地放，而temp則會逐一顯示出陣列中的內容。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temps = [<span class="string">"qwe"</span>, <span class="string">"asd"</span>, <span class="string">"zxc"</span>, <span class="string">"rty"</span>]</span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> temps &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hi, \(temp)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要指定一個陣列的範圍可以使用count來得知他的數量。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ops = [<span class="string">"qwe"</span>, <span class="string">"asd"</span>, <span class="string">"zxc"</span>, <span class="string">"rty"</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;ops.<span class="built_in">count</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hey, \(ops[i])"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了上敘的for迴圈外我們還可以使用while。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"GGLA::\(count)"</span>)</span><br><span class="line">    <span class="built_in">count</span>-=<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;迴圈&quot;&gt;&lt;a href=&quot;#迴圈&quot; class=&quot;headerlink&quot; title=&quot;迴圈&quot;&gt;&lt;/a&gt;迴圈&lt;/h1&gt;&lt;p&gt;迴圈是為了解決重複的事情時所建構的，我們可以簡單地使用迴圈來幫助我們減少程式碼中重複的動作。例如我們可以將下面的重複動作簡化成一個簡單的回圈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 007 Conditional Statements</title>
    <link href="https://chucs.github.io/swift-007-conditional-statements/"/>
    <id>https://chucs.github.io/swift-007-conditional-statements/</id>
    <published>2021-01-22T05:29:05.000Z</published>
    <updated>2021-01-22T05:45:03.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判斷式"><a href="#判斷式" class="headerlink" title="判斷式"></a>判斷式</h1><p>可以利用if else 來判斷變數，而在if後面的判斷中永遠只檢查是否是對的，而大括弧內的則是判斷通過條件後所執行的程式碼，你可以在裡面寫下任何想要執行的程式。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> price: <span class="type">String</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="string">"Davis"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> person == <span class="string">"Davis"</span> &#123;</span><br><span class="line">    price = <span class="string">"100"</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> person == <span class="string">"Joy"</span> &#123;</span><br><span class="line">    price = <span class="string">"200"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要多個判斷的話我們可以使用&amp;&amp;和||，&amp;&amp;代表兩邊的成立，||則代表只要有一邊成立就成立。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> toolA = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> toolB = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> toolA &amp;&amp; toolB &#123;</span><br><span class="line">    price = <span class="number">1000</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> toolA || toolB &#123;</span><br><span class="line">    price = <span class="number">2000</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    price = <span class="number">999</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們還可以使用!來將原本的變數變成相反的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> toolC = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> toolD = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> toolC &amp;&amp; !toolD &#123;</span><br><span class="line">    price = <span class="number">1000</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    price = <span class="number">9999</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;判斷式&quot;&gt;&lt;a href=&quot;#判斷式&quot; class=&quot;headerlink&quot; title=&quot;判斷式&quot;&gt;&lt;/a&gt;判斷式&lt;/h1&gt;&lt;p&gt;可以利用if else 來判斷變數，而在if後面的判斷中永遠只檢查是否是對的，而大括弧內的則是判斷通過條件後所執行的程式碼，你可以在裡面寫下任何想要執行的程式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 006 Dictionaries</title>
    <link href="https://chucs.github.io/swift-006-dictionaries/"/>
    <id>https://chucs.github.io/swift-006-dictionaries/</id>
    <published>2021-01-22T05:28:48.000Z</published>
    <updated>2021-01-22T05:45:05.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>在字典中你可以利用一個key來存放一個value，當你使用到key時會就印出value。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="string">"Davis"</span>: <span class="number">25</span>, <span class="string">"Joy"</span>: <span class="number">22</span>, <span class="string">"Emily"</span>: <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">age[<span class="string">"Davis"</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;/h1&gt;&lt;p&gt;在字典中你可以利用一個key來存放一個value，當你使用到key時會就印出value。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 005 Arrays</title>
    <link href="https://chucs.github.io/swift-005-arrays/"/>
    <id>https://chucs.github.io/swift-005-arrays/</id>
    <published>2021-01-22T05:28:32.000Z</published>
    <updated>2021-01-22T05:45:08.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="陣列"><a href="#陣列" class="headerlink" title="陣列"></a>陣列</h1><p>陣列的宣告可以使的一個變數中可以儲存許多個資料，但這邊要注意的一點是資料中的型態必須要是一致的否則會出現錯誤，還有在陣列中第一個資料是從0開始計算，如下為例aryNumbers[0]就會得到2。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aryNumbers = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line">aryNumbers[<span class="number">0</span>]</span><br><span class="line">aryNumbers[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aryString = [<span class="string">"ABC"</span>, <span class="string">"DEF"</span>, <span class="string">"GGG"</span>]</span><br><span class="line">aryString[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>如果想要儲存更多的資料可以利用append來加入新的資料。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = [<span class="type">String</span>]()</span><br><span class="line">temp.append(<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;陣列&quot;&gt;&lt;a href=&quot;#陣列&quot; class=&quot;headerlink&quot; title=&quot;陣列&quot;&gt;&lt;/a&gt;陣列&lt;/h1&gt;&lt;p&gt;陣列的宣告可以使的一個變數中可以儲存許多個資料，但這邊要注意的一點是資料中的型態必須要是一致的否則會出現錯誤，還有在陣列中第一個資料是從0開始計算，如下為例aryNumbers[0]就會得到2。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 004 String Interpolation</title>
    <link href="https://chucs.github.io/swift-004-string-interpolation/"/>
    <id>https://chucs.github.io/swift-004-string-interpolation/</id>
    <published>2021-01-22T05:28:18.000Z</published>
    <updated>2021-01-22T05:45:12.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字串變化"><a href="#字串變化" class="headerlink" title="字串變化"></a>字串變化</h1><p>字串的可以有很多種變化，我們可以宣告一個字串後利用運算符加上新的字串，我們也可以用括號<code>\()</code>來把變數放入字串中。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello, playground"</span></span><br><span class="line">str + <span class="string">" hello1"</span></span><br><span class="line">str += <span class="string">" hello2"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">25</span></span><br><span class="line"><span class="keyword">var</span> myAge = <span class="string">"My age is \(age)"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字串變化&quot;&gt;&lt;a href=&quot;#字串變化&quot; class=&quot;headerlink&quot; title=&quot;字串變化&quot;&gt;&lt;/a&gt;字串變化&lt;/h1&gt;&lt;p&gt;字串的可以有很多種變化，我們可以宣告一個字串後利用運算符加上新的字串，我們也可以用括號&lt;code&gt;\()&lt;/code&gt;來把變數放入字串中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift 003 Operators</title>
    <link href="https://chucs.github.io/swift-003-operators/"/>
    <id>https://chucs.github.io/swift-003-operators/</id>
    <published>2021-01-22T05:27:51.000Z</published>
    <updated>2021-01-22T05:45:14.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="運算符"><a href="#運算符" class="headerlink" title="運算符"></a>運算符</h1><p>宣告變數利用運算符進行運算。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">c</span> = a + b</span><br><span class="line"></span><br><span class="line"><span class="built_in">c</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="built_in">c</span> &lt; <span class="number">3</span></span><br><span class="line"><span class="built_in">c</span> &gt;= <span class="number">3</span></span><br><span class="line"><span class="built_in">c</span> &lt;= <span class="number">3</span></span><br><span class="line"><span class="built_in">c</span> == <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isTrue = <span class="literal">true</span></span><br><span class="line">!isTrue</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;運算符&quot;&gt;&lt;a href=&quot;#運算符&quot; class=&quot;headerlink&quot; title=&quot;運算符&quot;&gt;&lt;/a&gt;運算符&lt;/h1&gt;&lt;p&gt;宣告變數利用運算符進行運算。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift Type of Data</title>
    <link href="https://chucs.github.io/swift-002-type-of-data/"/>
    <id>https://chucs.github.io/swift-002-type-of-data/</id>
    <published>2021-01-22T05:26:15.000Z</published>
    <updated>2021-01-22T05:45:18.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="資料與型態"><a href="#資料與型態" class="headerlink" title="資料與型態"></a>資料與型態</h1><p>類型的宣吿可以使變數擁有一個型態，swift會根據創建時給定的型態來做分配。下面會介紹幾種型態，並做一些範例來讓你更了解。</p><a id="more"></a><p><code>str</code>存的是字串，你可以輸入多個文字。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">name = <span class="string">"Davis"</span></span><br></pre></td></tr></table></figure><p><code>int</code>存的的是一個正整數。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">age = <span class="number">26</span></span><br></pre></td></tr></table></figure><p><code>float</code>和<code>double</code>分別為短的浮點數和長的浮點數，可以由輸出中看到<code>float</code>和<code>double</code>印出來的浮點數數量發現他們的差別。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pi: <span class="type">Float</span></span><br><span class="line">pi = <span class="number">3.14159265359</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longpi: <span class="type">Double</span></span><br><span class="line">longpi = <span class="number">3.14159265359</span></span><br></pre></td></tr></table></figure><p><code>bool</code>只能存在<code>true</code>或是<code>false</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isTrue: <span class="type">Bool</span></span><br><span class="line">isTrue = <span class="literal">true</span></span><br><span class="line">isTrue = <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;資料與型態&quot;&gt;&lt;a href=&quot;#資料與型態&quot; class=&quot;headerlink&quot; title=&quot;資料與型態&quot;&gt;&lt;/a&gt;資料與型態&lt;/h1&gt;&lt;p&gt;類型的宣吿可以使變數擁有一個型態，swift會根據創建時給定的型態來做分配。下面會介紹幾種型態，並做一些範例來讓你更了解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift Variables and Constants</title>
    <link href="https://chucs.github.io/swift-001-variables-and-constants/"/>
    <id>https://chucs.github.io/swift-001-variables-and-constants/</id>
    <published>2021-01-22T05:24:47.000Z</published>
    <updated>2021-01-22T05:45:22.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="宣告"><a href="#宣告" class="headerlink" title="宣告"></a>宣告</h1><p>宣告一個變數，使用var用此宣告的變數可以任意更改裡面存的值。</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Davis"</span></span><br><span class="line">name = <span class="string">"John"</span></span><br></pre></td></tr></table></figure><p>若不允許修改值可使用let，注意使用let後若進行修改，則會發生錯誤。所以這個變數如果不會被修改的話，建議使用let來進行宣告。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"Davis"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;宣告&quot;&gt;&lt;a href=&quot;#宣告&quot; class=&quot;headerlink&quot; title=&quot;宣告&quot;&gt;&lt;/a&gt;宣告&lt;/h1&gt;&lt;p&gt;宣告一個變數，使用var用此宣告的變數可以任意更改裡面存的值。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift tutorials" scheme="https://chucs.github.io/categories/Swift-tutorials/"/>
    
    
      <category term="swift" scheme="https://chucs.github.io/tags/swift/"/>
    
  </entry>
  
</feed>
