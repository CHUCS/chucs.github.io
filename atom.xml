<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHUPCCA</title>
  
  <subtitle>解題報告</subtitle>
  <link href="https://chucs.github.io/atom.xml" rel="self"/>
  
  <link href="https://chucs.github.io/"/>
  <updated>2021-12-31T14:36:52.591Z</updated>
  <id>https://chucs.github.io/</id>
  
  <author>
    <name>CHUPCCA</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter 030 - App Icon (part14)</title>
    <link href="https://chucs.github.io/flutter-030-application-icon/"/>
    <id>https://chucs.github.io/flutter-030-application-icon/</id>
    <published>2021-12-31T14:08:04.000Z</published>
    <updated>2021-12-31T14:36:52.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道大家對這個架構是不是有一點感覺了，有機會再教大家如何寫測試，不過你已經學會了60%的基本概念，要開發一個APP基本上沒有問題，在教學的最後要教大家如更改App的圖示。</p><span id="more"></span><h4 id="需要具備知識"><a href="#需要具備知識" class="headerlink" title="需要具備知識"></a>需要具備知識</h4><ul><li><a href="https://chucs.github.io/flutter-001-root">基本元件應用</a></li><li><a href="https://chucs.github.io/flutter-017-domain-driven-design">專案架構 (Domain Driven Design)</a></li><li><a href="https://chucs.github.io/flutter-013-bloc">管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://chucs.github.io/flutter-015-dartz">大海撈針不是辦法 ( Dartz )</a></li></ul><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_test:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">flutter_launcher_icons:</span> <span class="string">^0.9.2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">flutter_icons:</span></span><br><span class="line">  <span class="attr">ios:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">android:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">image_path_ios:</span> <span class="string">&quot;assets/launcher/icon.png&quot;</span></span><br><span class="line">  <span class="attr">image_path_android:</span> <span class="string">&quot;assets/launcher/icon.png&quot;</span></span><br></pre></td></tr></table></figure><h3 id="生成圖片"><a href="#生成圖片" class="headerlink" title="生成圖片"></a>生成圖片</h3><p>將圖片加入資料夾中(<code>assets/launcher/Icon.png</code>)，然後輸入下面的命令，完成後重新建構專案App的圖示就會出現囉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter pub run flutter_launcher_icons:main</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/stunning_tribble/master/assets/image/aytgubhj.png"></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>有夢想才會進步，祝大家都可以寫出自己的APP</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不知道大家對這個架構是不是有一點感覺了，有機會再教大家如何寫測試，不過你已經學會了60%的基本概念，要開發一個APP基本上沒有問題，在教學的最後要教大家如更改App的圖示。&lt;/p&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 029 - Presentation Click Game Screen (part13)</title>
    <link href="https://chucs.github.io/flutter-029-presentation-click-game-screen/"/>
    <id>https://chucs.github.io/flutter-029-presentation-click-game-screen/</id>
    <published>2021-12-31T14:07:16.000Z</published>
    <updated>2021-12-31T14:23:11.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要來創建一個CountBloc，然後就可以開始製作我們的CountButton了，我加了讓數字有彈跳的效果寫了一些動畫，有興趣的可以看原本程式碼。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day29">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="需要具備知識"><a href="#需要具備知識" class="headerlink" title="需要具備知識"></a>需要具備知識</h4><ul><li><a href="https://chucs.github.io/flutter-001-root">基本元件應用</a></li><li><a href="https://chucs.github.io/flutter-017-domain-driven-design">專案架構 (Domain Driven Design)</a></li><li><a href="https://chucs.github.io/flutter-013-bloc">管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://chucs.github.io/flutter-015-dartz">大海撈針不是辦法 ( Dartz )</a></li></ul><h3 id="CountBloc"><a href="#CountBloc" class="headerlink" title="CountBloc"></a>CountBloc</h3><p>創建一個CountBloc，把我們的按鈕畫面放進去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">BlocProvider(</span><br><span class="line">    create: (context) =&gt; CountBloc(</span><br><span class="line">      countRepository: CountRepository(),</span><br><span class="line">    ),</span><br><span class="line">    child: CountButton(),</span><br><span class="line">),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然後創建一個BlocBuilder來檢查每次累加數字的狀態。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  return BlocBuilder&lt;CountBloc, CountState&gt;(</span><br><span class="line">    builder: (context, state) &#123;</span><br><span class="line">      return AnimatedContainer(</span><br><span class="line">        .....</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在按下按鈕時觸發CountIncrementEvent的事件，並將我們現在count的數字傳進去做累加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  Material(</span><br><span class="line">    color: Colors.transparent,</span><br><span class="line">    child: InkWell(</span><br><span class="line">      highlightColor: Colors.transparent,</span><br><span class="line">      splashColor: Colors.transparent,</span><br><span class="line">      onTap: () =&gt; _tapUp(), // onTapUp</span><br><span class="line">      onTapDown: (TapDownDetails details) =&gt; _tapDown(state.count),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  void _tapDown(int count) &#123;</span><br><span class="line">    _animationController.forward();</span><br><span class="line">    HapticFeedback.heavyImpact();</span><br><span class="line">    BlocProvider.of&lt;CountBloc&gt;(context).add(CountIncrementEvent(count));</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/stunning_tribble/day29/assets/images/sadjuf.gif" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要來創建一個CountBloc，然後就可以開始製作我們的CountButton了，我加了讓數字有彈跳的效果寫了一些動畫，有興趣的可以看原本程式碼。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day29&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 028 - Application Click Game (part12)</title>
    <link href="https://chucs.github.io/flutter-028-application-click-game/"/>
    <id>https://chucs.github.io/flutter-028-application-click-game/</id>
    <published>2021-12-31T14:06:19.000Z</published>
    <updated>2021-12-31T14:23:03.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要把按下螢幕時觸發的事件接上去，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day28">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="需要具備知識"><a href="#需要具備知識" class="headerlink" title="需要具備知識"></a>需要具備知識</h4><ul><li><a href="https://chucs.github.io/flutter-001-root">基本元件應用</a></li><li><a href="https://chucs.github.io/flutter-017-domain-driven-design">專案架構 (Domain Driven Design)</a></li><li><a href="https://chucs.github.io/flutter-013-bloc">管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://chucs.github.io/flutter-015-dartz">大海撈針不是辦法 ( Dartz )</a></li></ul><h3 id="Count：Event"><a href="#Count：Event" class="headerlink" title="Count：Event"></a>Count：Event</h3><p>按下螢幕時IncrementEvent事件觸發並把數字傳進來。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;count_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CountEvent</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CountEvent();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncrementEvent</span> <span class="keyword">extends</span> <span class="title">CountEvent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> IncrementEvent(<span class="keyword">this</span>.count);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Count：State"><a href="#Count：State" class="headerlink" title="Count：State"></a>Count：State</h3><p>將計數器切成三個階段，初始數字、計數成功和計數失敗，成功的時候就會回傳加一的結果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;count_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CountState</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> CountState();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountInitial</span> <span class="keyword">extends</span> <span class="title">CountState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountSuccess</span> <span class="keyword">extends</span> <span class="title">CountState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> CountSuccess(<span class="keyword">this</span>.count);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountFailure</span> <span class="keyword">extends</span> <span class="title">CountState</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Count：Bloc"><a href="#Count：Bloc" class="headerlink" title="Count：Bloc"></a>Count：Bloc</h3><p>IncrementEvent事件觸發時把數字傳進來加一然後回傳加一結果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:developer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:bloc/bloc.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:equatable/equatable.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:stunning_tribble/infrastructure/count/count_repository.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;count_event.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;count_state.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountBloc</span> <span class="keyword">extends</span> <span class="title">Bloc</span>&lt;<span class="title">CountEvent</span>, <span class="title">CountState</span>&gt; </span>&#123;</span><br><span class="line">  CountRepository _countRepository;</span><br><span class="line">  CountBloc(&#123;<span class="keyword">required</span> CountRepository countRepository&#125;)</span><br><span class="line">      : _countRepository = countRepository,</span><br><span class="line">        <span class="keyword">super</span>(CountInitial());</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;CountState&gt; mapEventToState(</span><br><span class="line">    CountEvent event,</span><br><span class="line">  ) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> IncrementEvent) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* _mapIncrementToState(event.count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;CountState&gt; _mapIncrementToState(<span class="built_in">int</span> _count) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">final</span> increment = <span class="keyword">await</span> _countRepository.increment(_count);</span><br><span class="line">    <span class="keyword">yield</span>* increment.fold(</span><br><span class="line">      (countFailure) <span class="keyword">async</span>* &#123;</span><br><span class="line">        log(<span class="string">&quot;<span class="subst">$countFailure</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> CountFailure();</span><br><span class="line">      &#125;,</span><br><span class="line">      (count) <span class="keyword">async</span>* &#123;</span><br><span class="line">        <span class="keyword">yield</span> CountSuccess(count);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>距離遊戲完成就剩最後幾步了。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要把按下螢幕時觸發的事件接上去，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day28&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 027 - Infrastructure Click Game (part11)</title>
    <link href="https://chucs.github.io/flutter-027-infrastructure-click-game/"/>
    <id>https://chucs.github.io/flutter-027-infrastructure-click-game/</id>
    <published>2021-12-31T14:04:42.000Z</published>
    <updated>2021-12-31T14:23:00.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵寫到這邊時不知道大家都已經非常熟練了，這次我們要來做一個有趣的小遊戲，就是點一下螢幕數字就會加一，是不是很有趣呢？</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day27">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="需要具備知識"><a href="#需要具備知識" class="headerlink" title="需要具備知識"></a>需要具備知識</h4><ul><li><a href="https://ithelp.ithome.com.tw/articles/10258878">基本元件應用</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259714">專案架構 (Domain Driven Design)</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259564">管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10259644">大海撈針不是辦法 ( Dartz )</a></li></ul><h3 id="Repository-amp-Domain"><a href="#Repository-amp-Domain" class="headerlink" title="Repository &amp; Domain"></a>Repository &amp; Domain</h3><p>即便是一個小小的程式還是要照著流程走。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:equatable/equatable.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountAddFailure</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  CountAddFailure(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.message&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [message];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dartz/dartz.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:stunning_tribble/domain/count/count_failure.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CountRepositoryImp</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Count model</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">Increment one</span></span></span><br><span class="line">  Future&lt;Either&lt;CountAddFailure, <span class="built_in">int</span>&gt;&gt; increment(<span class="built_in">int</span> count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountRepository</span> <span class="keyword">implements</span> <span class="title">CountRepositoryImp</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;Either&lt;CountAddFailure, <span class="built_in">int</span>&gt;&gt; increment(count) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> right(++count);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> left(CountAddFailure(message: <span class="string">&quot;<span class="subst">$e</span>&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h2><p>應該滿有趣的吧～</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵寫到這邊時不知道大家都已經非常熟練了，這次我們要來做一個有趣的小遊戲，就是點一下螢幕數字就會加一，是不是很有趣呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day27&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 026 - Presentation Login &amp; Splash Screen (part10)</title>
    <link href="https://chucs.github.io/flutter-026-presentation-login/"/>
    <id>https://chucs.github.io/flutter-026-presentation-login/</id>
    <published>2021-12-31T14:03:45.000Z</published>
    <updated>2021-12-31T14:23:11.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天就是把之前寫的一堆功能放到Screen裡面，由於是UI的部分所以程式碼會很長，有些地方我只會擷取片段，建議大家看完整程式碼。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day26">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="需要具備知識"><a href="#需要具備知識" class="headerlink" title="需要具備知識"></a>需要具備知識</h4><ul><li><a href="https://chucs.github.io/flutter-001-root">基本元件應用</a></li><li><a href="https://chucs.github.io/flutter-017-domain-driven-design">專案架構 (Domain Driven Design)</a></li><li><a href="https://chucs.github.io/flutter-013-bloc">管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://chucs.github.io/flutter-015-dartz">大海撈針不是辦法 ( Dartz )</a></li></ul><h3 id="Splash-Screen"><a href="#Splash-Screen" class="headerlink" title="Splash Screen"></a>Splash Screen</h3><p>把首頁的MultiBlocProvider加上AuthenticationBloc，並觸發事件AppStarted()來檢查是否有登入過。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.dart</span></span><br><span class="line"></span><br><span class="line">BlocProvider(</span><br><span class="line">  create: (context) =&gt; AuthenticationBloc(</span><br><span class="line">    authRepository: authRepository,</span><br><span class="line">  )..add(AppStarted()),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>把這個畫面設置成初始畫面，然後當事件觸發後BlocListener會監聽AuthenticationBloc現在的狀態進行頁面切換。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SplashScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SplashScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocListener&lt;AuthenticationBloc, AuthenticationState&gt;(</span><br><span class="line">      listener: (context, state) &#123;</span><br><span class="line">        <span class="keyword">if</span> (state <span class="keyword">is</span> Unauthenticated) &#123;</span><br><span class="line">          context.replaceRoute(LoginScreen());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (state <span class="keyword">is</span> Authenticated) &#123;</span><br><span class="line">          context.replaceRoute(HomeScreen());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        backgroundColor: Theme.of(context).backgroundColor,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Login-Screen"><a href="#Login-Screen" class="headerlink" title="Login Screen"></a>Login Screen</h3><p>在<code>LoginScreen</code>這邊一樣加一個<code>AuthenticationBloc</code>監聽器，檢查是否登入成功取得驗證。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LoginScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocListener&lt;AuthenticationBloc, AuthenticationState&gt;(</span><br><span class="line">      listener: (context, state) &#123;</span><br><span class="line">        <span class="keyword">if</span> (state <span class="keyword">is</span> Authenticated) &#123;</span><br><span class="line">          context.replaceRoute(HomeScreen());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Scaffold(</span><br><span class="line">        backgroundColor: Theme.of(context).backgroundColor,</span><br><span class="line">        body: Container(</span><br><span class="line">          width: MediaQuery.of(context).size.width,</span><br><span class="line">          height: MediaQuery.of(context).size.height,</span><br><span class="line">          child: Stack(</span><br><span class="line">            alignment: Alignment.center,</span><br><span class="line">            children: [</span><br><span class="line">              Positioned(</span><br><span class="line">                top: <span class="number">200</span>,</span><br><span class="line">                child: Text(</span><br><span class="line">                  <span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">                  style: Theme.of(context).textTheme.bodyText1,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              Positioned(</span><br><span class="line">                top: <span class="number">370</span>,</span><br><span class="line">                child: BlocProvider(</span><br><span class="line">                  create: (context) =&gt;</span><br><span class="line">                      SignInBloc(authRepository: AuthRepository()),</span><br><span class="line">                  child: LoginFrom(),</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Login-From"><a href="#Login-From" class="headerlink" title="Login From"></a>Login From</h3><p>創建<code>SignInBloc</code>然後在<code>LoginForm</code>裡面寫一個<code>SignInBloc</code>的監聽器來檢查登入成功或失敗，如果登入成功的話就觸法<code>LoggedIn</code>的事件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Positioned(</span><br><span class="line">    top: <span class="number">370</span>,</span><br><span class="line">    child: BlocProvider(</span><br><span class="line">      create: (context) =&gt;</span><br><span class="line">          SignInBloc(authRepository: AuthRepository()),</span><br><span class="line">      child: LoginFrom(),</span><br><span class="line">    ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginFrom</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LoginFrom(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocListener&lt;SignInBloc, SignInState&gt;(</span><br><span class="line">      listener: (context, state) &#123;</span><br><span class="line">        <span class="keyword">if</span> (state <span class="keyword">is</span> SignInStateSuccess) &#123;</span><br><span class="line">          BlocProvider.of&lt;AuthenticationBloc&gt;(context).add(LoggedIn());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (state <span class="keyword">is</span> SignInStateFailure) &#123;</span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> Display a snackbar</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      child: Column(</span><br><span class="line">        children: [</span><br><span class="line">          GoogleSignInButton(),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/stunning_tribble/day26/assets/images/ZcRe5Cm.png" alt=""></p><h3 id="Home-Screen"><a href="#Home-Screen" class="headerlink" title="Home Screen"></a>Home Screen</h3><p>在首頁檢查驗證登入狀態，然後在登出按鈕(左上角的小啤酒)新增LoggedOut事件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> BlocListener&lt;AuthenticationBloc, AuthenticationState&gt;(</span><br><span class="line">  listener: (context, state) &#123;</span><br><span class="line">    <span class="keyword">if</span> (state <span class="keyword">is</span> Unauthenticated) &#123;</span><br><span class="line">      context.replaceRoute(LoginScreen());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignOutButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> IconButton(</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        BlocProvider.of&lt;AuthenticationBloc&gt;(context).add(LoggedOut());</span><br><span class="line">      &#125;,</span><br><span class="line">      icon: Icon(</span><br><span class="line">        Icons.sports_bar_rounded,</span><br><span class="line">        color: Theme.of(context).shadowColor,</span><br><span class="line">        size: <span class="number">30</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/stunning_tribble/day26/assets/images/iuheepo.gif" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天就是把之前寫的一堆功能放到Screen裡面，由於是UI的部分所以程式碼會很長，有些地方我只會擷取片段，建議大家看完整程式碼。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day26&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 025 - Application Authentication (part9)</title>
    <link href="https://chucs.github.io/flutter-025-application-authentication/"/>
    <id>https://chucs.github.io/flutter-025-application-authentication/</id>
    <published>2021-12-31T14:02:54.000Z</published>
    <updated>2021-12-31T14:23:11.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵接著就是來驗證登入狀態，如果已經登入就跳轉到首頁否則就在登入畫面，看完我這句話就知道要使用Bloc了，只要是畫面與功能就要使用到Bloc。以上是一個基本的狀態你還可以檢查有沒有重複登入等…。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day25">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="需要具備知識"><a href="#需要具備知識" class="headerlink" title="需要具備知識"></a>需要具備知識</h4><ul><li><a href="https://chucs.github.io/flutter-001-root">基本元件應用</a></li><li><a href="https://chucs.github.io/flutter-017-domain-driven-design">專案架構 (Domain Driven Design)</a></li><li><a href="https://chucs.github.io/flutter-013-bloc">管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://chucs.github.io/flutter-015-dartz">大海撈針不是辦法 ( Dartz )</a></li></ul><h3 id="Authentication：Event"><a href="#Authentication：Event" class="headerlink" title="Authentication：Event"></a>Authentication：Event</h3><p>事件分成三個，AppStarted用於開啟APP時觸發的事件，用來檢查有沒有登入，如果沒有就跳轉到登入介面，LoggedIn用於登入成功時觸發把<code>未登入狀態</code>切換成<code>已登入狀態</code>，最後就LoggedOut是登出按鈕觸發時使用，將<code>已登入</code>狀態切換成<code>未登入狀態</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;authentication_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationEvent</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AuthenticationEvent();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppStarted</span> <span class="keyword">extends</span> <span class="title">AuthenticationEvent</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggedIn</span> <span class="keyword">extends</span> <span class="title">AuthenticationEvent</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggedOut</span> <span class="keyword">extends</span> <span class="title">AuthenticationEvent</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Authentication：State"><a href="#Authentication：State" class="headerlink" title="Authentication：State"></a>Authentication：State</h3><p>狀態可以分成兩個，未認證與認證，如果認證成功就切換到首頁否則就停留在登入畫面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;authentication_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationState</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AuthenticationState();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthenticationInitial</span> <span class="keyword">extends</span> <span class="title">AuthenticationState</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Authenticated</span> <span class="keyword">extends</span> <span class="title">AuthenticationState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> displayName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Authenticated(<span class="keyword">this</span>.displayName);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [displayName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unauthenticated</span> <span class="keyword">extends</span> <span class="title">AuthenticationState</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Authentication：Bloc"><a href="#Authentication：Bloc" class="headerlink" title="Authentication：Bloc"></a>Authentication：Bloc</h3><p>判斷三個事件所要觸法的功能，寫到這邊時大家應該都對這個架構感覺了吧，是不是覺得越來越美了呢。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:developer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:bloc/bloc.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:equatable/equatable.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:stunning_tribble/infrastructure/auth/auth_repository.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;authentication_event.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;authentication_state.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthenticationBloc</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Bloc</span>&lt;<span class="title">AuthenticationEvent</span>, <span class="title">AuthenticationState</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> AuthRepository _userRepository;</span><br><span class="line"></span><br><span class="line">  AuthenticationBloc(&#123;</span><br><span class="line">    <span class="keyword">required</span> AuthRepository userRepository,</span><br><span class="line">  &#125;)  : _userRepository = userRepository,</span><br><span class="line">        <span class="keyword">super</span>(AuthenticationInitial());</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;AuthenticationState&gt; mapEventToState(</span><br><span class="line">    AuthenticationEvent event,</span><br><span class="line">  ) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> AppStarted) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* _mapAppStartedToState();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">is</span> LoggedIn) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* _mapLoggedInToState();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">is</span> LoggedOut) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* _mapLoggedOutToState();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;AuthenticationState&gt; _mapAppStartedToState() <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">final</span> isSignedIn = <span class="keyword">await</span> _userRepository.isSignedIn();</span><br><span class="line">    <span class="keyword">yield</span>* isSignedIn.fold(</span><br><span class="line">      (failure) <span class="keyword">async</span>* &#123;</span><br><span class="line">        log(<span class="string">&quot;<span class="subst">$failure</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> Unauthenticated();</span><br><span class="line">      &#125;,</span><br><span class="line">      (isSignedInSuccess) <span class="keyword">async</span>* &#123;</span><br><span class="line">        <span class="keyword">yield</span>* _mapLoggedInToState();</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;AuthenticationState&gt; _mapLoggedInToState() <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">final</span> user = <span class="keyword">await</span> _userRepository.getUser();</span><br><span class="line">    <span class="keyword">yield</span>* user.fold(</span><br><span class="line">      (failure) <span class="keyword">async</span>* &#123;</span><br><span class="line">        log(<span class="string">&quot;<span class="subst">$failure</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> Unauthenticated();</span><br><span class="line">      &#125;,</span><br><span class="line">      (user) <span class="keyword">async</span>* &#123;</span><br><span class="line">        <span class="keyword">yield</span> Authenticated(user.displayName.toString());</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;AuthenticationState&gt; _mapLoggedOutToState() <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">final</span> signOut = <span class="keyword">await</span> _userRepository.signOut();</span><br><span class="line">    <span class="keyword">yield</span>* signOut.fold(</span><br><span class="line">      (failure) <span class="keyword">async</span>* &#123;</span><br><span class="line">        log(<span class="string">&quot;<span class="subst">$failure</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> Unauthenticated();</span><br><span class="line">      &#125;,</span><br><span class="line">      (r) <span class="keyword">async</span>* &#123;</span><br><span class="line">        <span class="keyword">yield</span> Unauthenticated();</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵接著就是來驗證登入狀態，如果已經登入就跳轉到首頁否則就在登入畫面，看完我這句話就知道要使用Bloc了，只要是畫面與功能就要使用到Bloc。以上是一個基本的狀態你還可以檢查有沒有重複登入等…。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day25&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 024 - Application Login (part8)</title>
    <link href="https://chucs.github.io/flutter-024-application-login/"/>
    <id>https://chucs.github.io/flutter-024-application-login/</id>
    <published>2021-12-31T14:02:06.000Z</published>
    <updated>2021-12-31T14:23:11.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵這裡我們要將Google登入與介面做連接，所以又要使用Bloc了，老樣子按照著Event-&gt;State-&gt;Bloc的步驟建築起來吧。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day24">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="需要具備的知識"><a href="#需要具備的知識" class="headerlink" title="需要具備的知識"></a>需要具備的知識</h4><ul><li><a href="https://chucs.github.io/flutter-017-domain-driven-design">專案架構 (Domain Driven Design)</a></li><li><a href="https://chucs.github.io/flutter-013-bloc">管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://chucs.github.io/flutter-001-root">基本元件應用</a></li></ul><h2 id="Login：Event"><a href="#Login：Event" class="headerlink" title="Login：Event"></a>Login：Event</h2><p>由於我只實作Google登入所以只有一個Google登入的事件，如果你有其他的可以繼續擴充。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;sign_in_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SignInEvent</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SignInEvent();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginWithGooglePressed</span> <span class="keyword">extends</span> <span class="title">LoginEvent</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Login：State"><a href="#Login：State" class="headerlink" title="Login：State"></a>Login：State</h2><p>狀態分成三個登入成功、登入失敗和登入中，如果你是使用輸入帳密的登入話，還可以在裡面加一些參數來檢查是帳號沒輸入還是密碼沒輸入等等，這樣可以在UI上顯示錯誤訊息。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;sign_in_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SignInState</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SignInState();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignInStateInitial</span> <span class="keyword">extends</span> <span class="title">SignInState</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignInStateLoading</span> <span class="keyword">extends</span> <span class="title">SignInState</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignInStateFailure</span> <span class="keyword">extends</span> <span class="title">SignInState</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignInStateSuccess</span> <span class="keyword">extends</span> <span class="title">SignInState</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Login：Bloc"><a href="#Login：Bloc" class="headerlink" title="Login：Bloc"></a>Login：Bloc</h2><p>登入然後檢查成功或失敗，這就是等等我們按鈕觸發事件時會執行的任務。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:developer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:bloc/bloc.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:equatable/equatable.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:stunning_tribble/infrastructure/auth/auth_repository.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;sign_in_event.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;sign_in_state.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignInBloc</span> <span class="keyword">extends</span> <span class="title">Bloc</span>&lt;<span class="title">SignInEvent</span>, <span class="title">SignInState</span>&gt; </span>&#123;</span><br><span class="line">  AuthRepository _userRepository;</span><br><span class="line"></span><br><span class="line">  SignInBloc(&#123;</span><br><span class="line">    <span class="keyword">required</span> AuthRepository userRepository,</span><br><span class="line">  &#125;)  : _userRepository = userRepository,</span><br><span class="line">        <span class="keyword">super</span>(SignInStateInitial());</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;SignInState&gt; mapEventToState(</span><br><span class="line">    SignInEvent event,</span><br><span class="line">  ) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> SignInWithGooglePressed) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* _mapLoginWithGooglePressedToState();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;SignInState&gt; _mapLoginWithGooglePressedToState() <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">final</span> user = <span class="keyword">await</span> _userRepository.signInWithGoogle();</span><br><span class="line">    <span class="keyword">yield</span>* user.fold(</span><br><span class="line">      (failure) <span class="keyword">async</span>* &#123;</span><br><span class="line">        log(<span class="string">&quot;<span class="subst">$failure</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> SignInStateFailure();</span><br><span class="line">      &#125;,</span><br><span class="line">      (success) <span class="keyword">async</span>* &#123;</span><br><span class="line">        <span class="keyword">yield</span> SignInStateSuccess();</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵這裡我們要將Google登入與介面做連接，所以又要使用Bloc了，老樣子按照著Event-&amp;gt;State-&amp;gt;Bloc的步驟建築起來吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day24&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 023 - Domain Error Handle (part7)</title>
    <link href="https://chucs.github.io/flutter-023-domain-error-handle/"/>
    <id>https://chucs.github.io/flutter-023-domain-error-handle/</id>
    <published>2021-12-31T14:00:28.000Z</published>
    <updated>2021-12-31T14:22:47.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要把偵錯的功能加上去，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day23">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="需準備的知識"><a href="#需準備的知識" class="headerlink" title="需準備的知識"></a>需準備的知識</h4><blockquote><p><a href="https://chucs.github.io/flutter-015-dartz">[Day15] Flutter - 大海撈針不是辦法 ( Dartz )</a></p></blockquote><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dartz:</span> <span class="string">^0.9.2</span></span><br></pre></td></tr></table></figure><h3 id="Domain：Google-Failure"><a href="#Domain：Google-Failure" class="headerlink" title="Domain：Google Failure"></a>Domain：Google Failure</h3><p>我創建了一個錯誤訊息的類別，如果Google登入出錯時會出現<code>GoogleAuthServerFailure</code>，如果你還有FB、Github等的登入你可以往裡面一直新增，<code>FirebaseAuthFailure</code>則是處理登入獲取使用者資料的錯誤訊息。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:equatable/equatable.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFailure</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> message;</span><br><span class="line"></span><br><span class="line">  AuthFailure(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.message&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [message];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoogleAuthServerFailure</span> <span class="keyword">extends</span> <span class="title">AuthFailure</span> </span>&#123;</span><br><span class="line">  GoogleAuthServerFailure(&#123;<span class="keyword">required</span> <span class="built_in">String</span> message&#125;) : <span class="keyword">super</span>(message: <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirebaseAuthFailure</span> <span class="keyword">extends</span> <span class="title">AuthFailure</span> </span>&#123;</span><br><span class="line">  FirebaseAuthFailure(&#123;<span class="keyword">required</span> <span class="built_in">String</span> message&#125;) : <span class="keyword">super</span>(message: <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改-Infrastructure-Auth"><a href="#修改-Infrastructure-Auth" class="headerlink" title="修改 Infrastructure Auth"></a>修改 Infrastructure Auth</h3><p>將所有功能都加上AuthFailure，我多新增了一個getUser，這樣一來登入完成後可以直接獲取使用者資訊。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dartz/dartz.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_sign_in/google_sign_in.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:firebase_auth/firebase_auth.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:stunning_tribble/domain/auth/auth_failure.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRepositoryImpl</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Used when the google login button is triggered.</span></span></span><br><span class="line">  Future&lt;Either&lt;AuthFailure, Unit&gt;&gt; signInWithGoogle();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Check if you are logged in.</span></span></span><br><span class="line">  Future&lt;Either&lt;AuthFailure, Unit&gt;&gt; isSignedIn();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Log out of device.</span></span></span><br><span class="line">  Future&lt;Either&lt;AuthFailure, Unit&gt;&gt; signOut();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Get current user info.</span></span></span><br><span class="line">  Future&lt;Either&lt;AuthFailure, User&gt;&gt; getUser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthRepository</span> <span class="keyword">implements</span> <span class="title">AuthRepositoryImpl</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> FirebaseAuth _firebaseAuth;</span><br><span class="line">  <span class="keyword">final</span> GoogleSignIn _googleSignIn;</span><br><span class="line"></span><br><span class="line">  AuthRepository()</span><br><span class="line">      : _firebaseAuth = FirebaseAuth.instance,</span><br><span class="line">        _googleSignIn = GoogleSignIn();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;Either&lt;AuthFailure, Unit&gt;&gt; signInWithGoogle() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> GoogleSignInAccount? googleUser = <span class="keyword">await</span> _googleSignIn.signIn();</span><br><span class="line">      <span class="keyword">if</span> (googleUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> left(GoogleAuthServerFailure(message: <span class="string">&quot;Cache User Failure&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">final</span> GoogleSignInAuthentication googleAuth =</span><br><span class="line">          <span class="keyword">await</span> googleUser.authentication;</span><br><span class="line">      <span class="keyword">final</span> AuthCredential credential = GoogleAuthProvider.credential(</span><br><span class="line">        accessToken: googleAuth.accessToken,</span><br><span class="line">        idToken: googleAuth.idToken,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">await</span> _firebaseAuth.signInWithCredential(credential);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> right(unit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> left(GoogleAuthServerFailure(message: <span class="string">&quot;<span class="subst">$e</span>&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;Either&lt;AuthFailure, Unit&gt;&gt; isSignedIn() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> User? currentUser = _firebaseAuth.currentUser;</span><br><span class="line">      <span class="keyword">if</span> (currentUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> right(unit);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left(FirebaseAuthFailure(message: <span class="string">&quot;Not Logged In&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> left(FirebaseAuthFailure(message: <span class="string">&quot;<span class="subst">$e</span>&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;Either&lt;AuthFailure, User&gt;&gt; getUser() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> right(_firebaseAuth.currentUser);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (_) &#123;</span><br><span class="line">      <span class="keyword">return</span> left(FirebaseAuthFailure(message: <span class="string">&quot;Get Current User Failure&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;Either&lt;AuthFailure, Unit&gt;&gt; signOut() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Future.wait([</span><br><span class="line">        _firebaseAuth.signOut(),</span><br><span class="line">        _googleSignIn.signOut(),</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">return</span> right(unit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> left(FirebaseAuthFailure(message: <span class="string">&quot;<span class="subst">$e</span>&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要把偵錯的功能加上去，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day23&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 022 - Infrastructure Authentication (part6)</title>
    <link href="https://chucs.github.io/flutter-022-infrastructure-authentication/"/>
    <id>https://chucs.github.io/flutter-022-infrastructure-authentication/</id>
    <published>2021-12-31T13:59:22.000Z</published>
    <updated>2021-12-31T14:23:11.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要把登入的Repository寫好備用，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day22">完整程式碼</a></p></blockquote><span id="more"></span><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">google_sign_in:</span> <span class="string">^5.0.5</span></span><br><span class="line"><span class="attr">firebase_auth:</span> <span class="string">^3.0.1</span></span><br><span class="line"><span class="attr">firebase_core:</span> <span class="string">^1.4.0</span></span><br></pre></td></tr></table></figure><h3 id="Google-登入"><a href="#Google-登入" class="headerlink" title="Google 登入"></a>Google 登入</h3><p>在登入時會有三個功能，第一個是按按鈕的時候觸發的google登入和第二個登出，第三個則是在開啟app時檢查有沒有登入過，有的話就可以跳過登入畫面，如果還不知道Google登入怎麼設定的可以到<a href="https://ithelp.ithome.com.tw/articles/10259691">Day16 - Google登入教學</a>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRepositoryImpl</span> </span>&#123;</span><br><span class="line">  Future&lt;<span class="built_in">bool</span>&gt; signInWithGoogle();</span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; signOut();</span><br><span class="line">  Future&lt;<span class="built_in">bool</span>&gt; isSignedIn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthRepository</span> <span class="keyword">implements</span> <span class="title">AuthRepositoryImpl</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> FirebaseAuth _firebaseAuth;</span><br><span class="line">  <span class="keyword">final</span> GoogleSignIn _googleSignIn;</span><br><span class="line"></span><br><span class="line">  AuthRepository()</span><br><span class="line">      : _firebaseAuth = FirebaseAuth.instance,</span><br><span class="line">        _googleSignIn = GoogleSignIn();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="built_in">bool</span>&gt; signInWithGoogle() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> GoogleSignInAccount? googleUser = <span class="keyword">await</span> _googleSignIn.signIn();</span><br><span class="line">    <span class="keyword">if</span> (googleUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> GoogleSignInAuthentication googleAuth =</span><br><span class="line">        <span class="keyword">await</span> googleUser.authentication;</span><br><span class="line">    <span class="keyword">final</span> AuthCredential credential = GoogleAuthProvider.credential(</span><br><span class="line">      accessToken: googleAuth.accessToken,</span><br><span class="line">      idToken: googleAuth.idToken,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">await</span> _firebaseAuth.signInWithCredential(credential);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; signOut() <span class="keyword">async</span> &#123;</span><br><span class="line">    Future.wait([</span><br><span class="line">      _firebaseAuth.signOut(),</span><br><span class="line">      _googleSignIn.signOut(),</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="built_in">bool</span>&gt; isSignedIn() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> User? currentUser = _firebaseAuth.currentUser;</span><br><span class="line">      <span class="keyword">if</span> (currentUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (_) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要把登入的Repository寫好備用，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day22&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 021 - Presentation AutoRouter (part5)</title>
    <link href="https://chucs.github.io/flutter-021-presentation-auto-router/"/>
    <id>https://chucs.github.io/flutter-021-presentation-auto-router/</id>
    <published>2021-12-31T13:58:13.000Z</published>
    <updated>2021-12-31T14:22:41.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要在我們的專案裡面加入場景的路由，這樣可以方便管理我們每個場景，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day19">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="需要準備的知識"><a href="#需要準備的知識" class="headerlink" title="需要準備的知識"></a>需要準備的知識</h4><ul><li><a href="https://chucs.github.io/flutter-012-auto-router">Auto Router教學</a></li></ul><h3 id="AutoRouter"><a href="#AutoRouter" class="headerlink" title="AutoRouter"></a>AutoRouter</h3><p>創建一個路徑並設置為初始路徑，完成後就可以執行生成檔案的指令，你將會得到router.gr.dart檔案，並且終端機會顯示成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter pub run build_runner watch --delete-conflicting-outputs</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:auto_route/auto_route.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:stunning_tribble/presentation/screens/home/home_screen.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MaterialAutoRouter</span>(</span><br><span class="line">  replaceInRouteName: <span class="string">&#x27;Page,Route&#x27;</span>,</span><br><span class="line">  routes: &lt;AutoRoute&gt;[</span><br><span class="line">    AutoRoute(</span><br><span class="line">      page: HomeScreen,</span><br><span class="line">      initial: <span class="keyword">true</span>,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> $<span class="title">AppRouter</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>接著宣告一個AppRouter()傳入APP內使用，如果改完後APP報錯，重新啟動後就可以使用了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line">  <span class="keyword">await</span> ConfigReader.initializeApp(Environment.dev);</span><br><span class="line">  <span class="keyword">final</span> AppRouter appRouter = AppRouter();</span><br><span class="line">  runApp(</span><br><span class="line">    MultiBlocProvider(</span><br><span class="line">      providers: [</span><br><span class="line">        BlocProvider(</span><br><span class="line">          create: (context) =&gt; ThemeBloc(),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">      child: MyApp(</span><br><span class="line">        appRouter: appRouter,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> AppRouter _appRouter;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> AppRouter appRouter,</span><br><span class="line">  &#125;)  : _appRouter = appRouter,</span><br><span class="line">        <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocBuilder&lt;ThemeBloc, ThemeState&gt;(</span><br><span class="line">      builder: (context, state) &#123;</span><br><span class="line">        <span class="keyword">return</span> MaterialApp.router(</span><br><span class="line">          debugShowCheckedModeBanner: ConfigReader.config().DEBUG,</span><br><span class="line">          title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">          theme: state.themeData,</span><br><span class="line">          darkTheme: ThemeData(),</span><br><span class="line">          routerDelegate: _appRouter.delegate(),</span><br><span class="line">          routeInformationParser: _appRouter.defaultRouteParser(),</span><br><span class="line">          builder: (context, router) =&gt; router!,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要在我們的專案裡面加入場景的路由，這樣可以方便管理我們每個場景，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day19&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 020 - Theme Dark mode &amp; Light mode (part4)</title>
    <link href="https://chucs.github.io/flutter-020-theme/"/>
    <id>https://chucs.github.io/flutter-020-theme/</id>
    <published>2021-12-31T13:56:57.000Z</published>
    <updated>2021-12-31T14:23:11.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要教如何利用Theme結合Bloc來切換主題配色，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day20">完整程式碼</a></p></blockquote><span id="more"></span><h4 id="會應用到的概念"><a href="#會應用到的概念" class="headerlink" title="會應用到的概念"></a>會應用到的概念</h4><ul><li><a href="https://chucs.github.io/flutter-013-bloc">管理程式碼好幫手 ( Bloc )</a></li><li><a href="https://chucs.github.io/flutter-001-root">基本元件應用</a></li></ul><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><p>使用Theme可以定義整個應用的主題，也可以使用元件來定義應用程式特定部分的顏色和字體樣式，例如 AppBars、按鈕、設置背景顏色和字體樣式等。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp(</span><br><span class="line">  title: appName,</span><br><span class="line">  theme: ThemeData(</span><br><span class="line">    brightness: Brightness.dark,</span><br><span class="line">    primaryColor: Colors.amber,</span><br><span class="line">    accentColor: Colors.accents,</span><br><span class="line">  ),</span><br><span class="line">  home: Home(),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bloc:</span> <span class="string">^7.1.0</span></span><br><span class="line"><span class="attr">flutter_bloc:</span> <span class="string">^7.1.0</span></span><br><span class="line"><span class="attr">equatable:</span> <span class="string">^2.0.3</span></span><br></pre></td></tr></table></figure><h3 id="ThemeData：Dark-mode-amp-Light-mode"><a href="#ThemeData：Dark-mode-amp-Light-mode" class="headerlink" title="ThemeData：Dark mode &amp; Light mode"></a>ThemeData：Dark mode &amp; Light mode</h3><p>在做主題切換前先來創建一個深色與淺色主題的顏色，利用上一篇day19的shared設定的顏色來做主題顏色。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:stunning_tribble/shared/colors.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppThemeData</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> ThemeData darkMode = ThemeData(</span><br><span class="line">    brightness: Brightness.dark,</span><br><span class="line">    backgroundColor: oil6Color,</span><br><span class="line">    primaryColorDark: oil2Color,</span><br><span class="line">    primaryColorLight: oil5Color,</span><br><span class="line">    textTheme: TextTheme(</span><br><span class="line">      bodyText1: TextStyle(</span><br><span class="line">        fontSize: <span class="number">80.0</span>,</span><br><span class="line">        color: oil2Color,</span><br><span class="line">        fontWeight: FontWeight.bold,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ThemeData lightMode = ThemeData(</span><br><span class="line">    brightness: Brightness.light,</span><br><span class="line">    backgroundColor: oil2Color,</span><br><span class="line">    primaryColorDark: oil2Color,</span><br><span class="line">    primaryColorLight: oil5Color,</span><br><span class="line">    textTheme: TextTheme(</span><br><span class="line">      bodyText1: TextStyle(</span><br><span class="line">        fontSize: <span class="number">80.0</span>,</span><br><span class="line">        color: oil5Color,</span><br><span class="line">        fontWeight: FontWeight.bold,</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bloc：Theme"><a href="#Bloc：Theme" class="headerlink" title="Bloc：Theme"></a>Bloc：Theme</h3><p>完成主題配置後就可以來建造熟悉的Bloc，不熟的同學可以去看day13的教學。首先是事件，由於我會使用 switch 這個小部件切換深淺主題，這個部件會回傳現在的狀態是開還是關，所以下面我就把true和false直接傳進去。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;theme_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ThemeEvent</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> isDark;</span><br><span class="line">  <span class="keyword">const</span> ThemeEvent(<span class="keyword">this</span>.isDark);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeChange</span> <span class="keyword">extends</span> <span class="title">ThemeEvent</span> </span>&#123;</span><br><span class="line">  ThemeChange(<span class="built_in">bool</span> isDark) : <span class="keyword">super</span>(isDark);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>傳進去以後呢我希望他回傳主題顏色和開關的狀態，這樣我們等等使用 BlocBuilder 的時候就可以改變UI和開關狀態。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;theme_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeState</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ThemeData themeData;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> isDark;</span><br><span class="line">  <span class="keyword">const</span> ThemeState(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.isDark,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.themeData,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [themeData, isDark];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Bloc中就按照著切換主題流程把它寫出來，當ThemeChange事件觸發時，把目前開關狀態傳入，然後判斷開關狀態切換主題。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:bloc/bloc.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:equatable/equatable.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:stunning_tribble/shared/theme.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;theme_event.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;theme_state.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeBloc</span> <span class="keyword">extends</span> <span class="title">Bloc</span>&lt;<span class="title">ThemeEvent</span>, <span class="title">ThemeState</span>&gt; </span>&#123;</span><br><span class="line">  ThemeBloc()</span><br><span class="line">      : <span class="keyword">super</span>(ThemeState(themeData: AppThemeData.darkMode, isDark: <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;ThemeState&gt; mapEventToState(</span><br><span class="line">    ThemeEvent event,</span><br><span class="line">  ) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> ThemeChange) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* _mapThemeChangeToState(event.isDark);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Stream&lt;ThemeState&gt; _mapThemeChangeToState(<span class="built_in">bool</span> _isDark) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="keyword">if</span> (_isDark) &#123;</span><br><span class="line">      <span class="keyword">yield</span> ThemeState(themeData: AppThemeData.darkMode, isDark: <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">yield</span> ThemeState(themeData: AppThemeData.lightMode, isDark: <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="切換深淺主題"><a href="#切換深淺主題" class="headerlink" title="切換深淺主題"></a>切換深淺主題</h3><p>首先創建剛剛寫好的ThemeBloc。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line">  <span class="keyword">await</span> ConfigReader.initializeApp(Environment.dev);</span><br><span class="line">  runApp(</span><br><span class="line">    MultiBlocProvider(</span><br><span class="line">      providers: [</span><br><span class="line">        BlocProvider(</span><br><span class="line">          create: (context) =&gt; ThemeBloc(),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">      child: MyApp(),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著利用BlocBuilder來查看themeData的狀態。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocBuilder&lt;ThemeBloc, ThemeState&gt;(</span><br><span class="line">      builder: (context, state) &#123;</span><br><span class="line">        <span class="keyword">return</span> MaterialApp(</span><br><span class="line">          debugShowCheckedModeBanner: ConfigReader.config().DEBUG,</span><br><span class="line">          title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">          theme: state.themeData,</span><br><span class="line">          darkTheme: ThemeData(),</span><br><span class="line">          home: HomeScreen(),</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後把我們的按鈕加入事件，你就可以切換主題囉！</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwtichModeButton</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SwtichModeButton(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> BlocBuilder&lt;ThemeBloc, ThemeState&gt;(</span><br><span class="line">      builder: (context, state) &#123;</span><br><span class="line">        <span class="keyword">return</span> Switch(</span><br><span class="line">          inactiveThumbColor: Theme.of(context).primaryColorLight,</span><br><span class="line">          activeColor: Theme.of(context).primaryColorDark,</span><br><span class="line">          value: state.isDark,</span><br><span class="line">          onChanged: (isDark) &#123;</span><br><span class="line">            BlocProvider.of&lt;ThemeBloc&gt;(context).add(ThemeChange(isDark));</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/stunning_tribble/day20/assets/images/ijNj2rg.gif" alt=""></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>本次的主題切換順便幫大家複習一下Bloc的用法。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要教如何利用Theme結合Bloc來切換主題配色，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day20&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 019 - Const Shared (part3)</title>
    <link href="https://chucs.github.io/flutter-019-const/"/>
    <id>https://chucs.github.io/flutter-019-const/</id>
    <published>2021-12-31T13:55:59.000Z</published>
    <updated>2021-12-31T14:23:11.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要介紹Const，利用它來宣告一些重複使用且不變的值，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day19">完整程式碼</a></p></blockquote><span id="more"></span><h3 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h3><p>Const 在 Flutter 扮演著重要的角色，當你使用<code>const</code>的變數時，只要在 APP 的生命週期中他永遠不會改變，因此它只會創建一次，這可以降低一些不必要的資源。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">String</span> word = <span class="string">&quot;Hello world&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="魚板範例"><a href="#魚板範例" class="headerlink" title="魚板範例"></a>魚板範例</h3><p>在寫Flutter時常常會重複使用一些顏色、字體和圖片，我們可以創建一個檔案將這些宣告成一個變數以便我們重複使用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Color oil1Color = Color(<span class="number">0xFFFBF5EF</span>);</span><br><span class="line"><span class="keyword">const</span> Color oil2Color = Color(<span class="number">0xFFF2D3AB</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Color oil3Color = Color(<span class="number">0xFFC69FA5</span>);</span><br><span class="line"><span class="keyword">const</span> Color oil4Color = Color(<span class="number">0xFF8B6D9C</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Color oil5Color = Color(<span class="number">0xFF494D7E</span>);</span><br><span class="line"><span class="keyword">const</span> Color oil6Color = Color(<span class="number">0xFF272744</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Home(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      backgroundColor: oil2Color,</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(<span class="string">&quot;Hello&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/stunning_tribble/day19/assets/images/TyCb6wo.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要介紹Const，利用它來宣告一些重複使用且不變的值，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day19&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 018 - Environment (part2)</title>
    <link href="https://chucs.github.io/flutter-018-environment/"/>
    <id>https://chucs.github.io/flutter-018-environment/</id>
    <published>2021-12-31T13:51:57.000Z</published>
    <updated>2021-12-31T14:22:32.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要教大家如何初始化 Environment，在未來的開發的過程中可以快速又方便的切換環境，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/stunning_tribble/tree/day18">完整程式碼</a></p></blockquote><span id="more"></span><h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>環境設定可以使開發的時候很方便的切換設定，通常會有開發、測試和產品三個狀態，每一個狀態中的參數將會對應不同狀態而不同，而我們可以預先設定好檔案，當重新載入時就可以切換狀態。</p><h3 id="設置參數"><a href="#設置參數" class="headerlink" title="設置參數"></a>設置參數</h3><p>在專案層中創建一個設置參數的<code>json</code>檔案，並在<code>pubspec.yaml</code>中設定<code>assets</code>的資料夾路徑。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">assets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">assets/config/</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/stunning_tribble/day18/assets/images/iCRwhRR.png" alt=""></p><h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><p>設定每個狀態的名稱，在開發時可以切換，而且還可以避免打錯字的問題。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Environment</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">name of the environment</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">default constructor</span></span></span><br><span class="line">  <span class="keyword">const</span> Environment(<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">preset of common env name &#x27;dev&#x27;</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> dev = <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">preset of common env name &#x27;prod&#x27;</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> prod = <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">preset of common env name &#x27;test&#x27;</span></span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">String</span> test = <span class="string">&#x27;testing&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>讀取剛剛設定好的參數檔案，而參數則會根據不同的<code>Environment</code>來獲取。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;config_model.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigReader</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> ConfigModel _config =</span><br><span class="line">      ConfigModel(API_HOST: <span class="string">&quot;API_HOST&quot;</span>, DEBUG: <span class="keyword">false</span>, TESTING: <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Future&lt;<span class="keyword">void</span>&gt; initializeApp(<span class="built_in">String?</span> env) <span class="keyword">async</span> &#123;</span><br><span class="line">    env = env ?? <span class="string">&quot;development&quot;</span>;</span><br><span class="line">    <span class="built_in">String</span> configString = <span class="keyword">await</span> rootBundle.loadString(<span class="string">&#x27;assets/config/env.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> jsonMap = json.decode(configString);</span><br><span class="line">    _config = ConfigModel.fromMap(jsonMap[env]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ConfigModel config() &#123;</span><br><span class="line">    <span class="keyword">return</span> _config;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>調用<code>WidgetsFlutterBinding.ensureInitialized()</code>，來實現初始元件的綁定，接著就可以初始環境設定了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line">  <span class="keyword">await</span> ConfigReader.initializeApp(Environment.prod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以試著切換不同的Environment，然後按下重新載入就可以看到Debug繃帶的變化了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: ConfigReader.config().DEBUG,</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: Home(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要教大家如何初始化 Environment，在未來的開發的過程中可以快速又方便的切換環境，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/stunning_tribble/tree/day18&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 017 - 實作篇：專案架構 (Domain Driven Design)</title>
    <link href="https://chucs.github.io/flutter-017-domain-driven-design/"/>
    <id>https://chucs.github.io/flutter-017-domain-driven-design/</id>
    <published>2021-12-31T13:50:26.000Z</published>
    <updated>2021-12-31T14:23:11.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵身為一個軟體工程師，我們最常見的問題就是變動的需求。而程式碼變更，就會有機會出現不可預期 Bug，有時候已經不是小拇指和食指動一動就可以解決的問題，因此設計模式可以降低程式的債務。本次專案目標就是利用DDD架構一步步帶大家寫出一個點擊小遊戲。</p><p>在這篇中給大家一些基本的概念可以在往後的實作中漸漸熟悉，如果想要更了解這個架構，可以到文章的最下面我放了幾篇推薦的文章還有一個對專案管理有幫助的影片，雖然他是用 Ruby 來講解的。</p><span id="more"></span><h3 id="Domain-Driven-Design"><a href="#Domain-Driven-Design" class="headerlink" title="Domain Driven Design"></a>Domain Driven Design</h3><p>在這個架構在於每一層都有獨立的事情，我們可以使他們的工作分割得更乾淨，這將帶給程式乾淨、易於測試和閱讀。有的人認為小型團隊使用這種架構只會拖累開發速度，雖然我並不反對，但是壯大後會下定決心更改架構的很少，因為要改成新架構時要投入的時間可能會是好幾倍，有時候幾乎是打掉重練，這就是我想分想給大家的原因。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day17/image/NUHhgax.png" alt=""></p><p>從上圖可以發現流程就跟蓋房子一樣，每個功能都是一棟房子不斷的循環著固定的建造流程，可以想像你的的專案就是一座城市。</p><h3 id="架構優缺點"><a href="#架構優缺點" class="headerlink" title="架構優缺點"></a>架構優缺點</h3><p>優點：</p><ul><li>專注在核心業務上</li><li>能夠應對未來的成長</li><li>保護業務邏輯</li><li>快速找到Bug</li></ul><p>缺點：</p><ul><li>需要一個熟悉架構的人來分配</li><li>開發速度慢</li></ul><h3 id="資料夾結構"><a href="#資料夾結構" class="headerlink" title="資料夾結構"></a>資料夾結構</h3><p>這是我的簡單創建的資料夾結構範例，裡面最主要包含了上面所講的<code>application</code>(infrastructure與presentation的橋樑)、<code>presentation</code>(所有場景)、<code>infrastructure</code>(功能)和<code>domain</code>(輸出資料)清楚的分類著，乾淨的資料夾可以讓你更好找到你需要的檔案，往後的教學都會遵循這個規則創建任何檔案。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">├── lib</span><br><span class="line">│   ├── application</span><br><span class="line">│   │   ├── auth</span><br><span class="line">│   │   │   ├── auth_bloc.dart</span><br><span class="line">│   │   │   ├── auth_event.dart</span><br><span class="line">│   │   │   └── auth_state.dart</span><br><span class="line">│   │   └── sign_in</span><br><span class="line">│   │       ├── sign_in_bloc.dart</span><br><span class="line">│   │       ├── sign_in_event.dart</span><br><span class="line">│   │       └── sign_in_state.dart</span><br><span class="line">│   ├── config</span><br><span class="line">│   │   └── environment.dart</span><br><span class="line">│   ├── domain</span><br><span class="line">│   │   └── failure.dart</span><br><span class="line">│   ├── infrastructure</span><br><span class="line">│   │   └── auth</span><br><span class="line">│   │       └── auth_repository.dart</span><br><span class="line">│   ├── main.dart</span><br><span class="line">│   └── presentation</span><br><span class="line">│       ├── router</span><br><span class="line">│       │   └── router.dart</span><br><span class="line">│       └── screens</span><br><span class="line">│           ├── home</span><br><span class="line">│           ├── login</span><br><span class="line">│           └── splash</span><br></pre></td></tr></table></figure><h3 id="需要具備的知識"><a href="#需要具備的知識" class="headerlink" title="需要具備的知識"></a>需要具備的知識</h3><ul><li><a href="https://chucs.github.io/flutter-001-root">基本元件與套件教學</a></li><li><a href="https://chucs.github.io/flutter-012-auto-router">Auto Router</a></li><li><a href="https://chucs.github.io/flutter-013-bloc">Bloc</a></li><li><a href="https://chucs.github.io/flutter-015-dartz">Dartz</a></li><li><a href="https://chucs.github.io/flutter-016-authentication">Firebase Authentication &amp; Google Sign-In ( IOS &amp; Android )</a></li></ul><h3 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h3><ul><li><a href="https://chucs.github.io/flutter-017-domain-driven-design">[Day17] Flutter - Architecture: Domain Driven Design (part1)</a></li><li><a href="https://chucs.github.io/flutter-018-environment">[Day18] Flutter - Environment (part2)</a></li><li><a href="https://chucs.github.io/flutter-019-const">[Day19] Flutter - Const: Shared (part3)</a></li><li><a href="https://chucs.github.io/flutter-020-theme">[Day20] Flutter - Theme: Dark mode &amp; Light mode (part4)</a></li><li><a href="https://chucs.github.io/flutter-021-presentation-auto-router">[Day21] Flutter - Presentation AutoRouter (part5)</a></li><li><a href="https://chucs.github.io/flutter-022-infrastructure-authentication">[Day22] Flutter - Infrastructure Authentication (part6)</a></li><li><a href="https://chucs.github.io/flutter-023-domain-error-handle">[Day23] Flutter - Domain Error Handle (part7)</a></li><li><a href="https://chucs.github.io/flutter-024-application-login">[Day24] Flutter - Application Login (part8)</a></li><li><a href="https://chucs.github.io/flutter-025-application-authentication">[Day25] Flutter - Application Authentication (part9)</a></li><li><a href="https://chucs.github.io/flutter-026-presentation-login">[Day26] Flutter - Presentation Login &amp; Splash Screen (part10)</a></li><li><a href="https://chucs.github.io/flutter-027-infrastructure-click-game">[Day27] Flutter - Infrastructure Click Game (part11)</a></li><li><a href="https://chucs.github.io/flutter-028-application-click-game">[Day28] Flutter - Application Click Game (part12)</a></li><li><a href="https://chucs.github.io/flutter-029-presentation-click-game-screen">[Day29] Flutter - Presentation Click Game Screen (part13)</a></li><li><a href="https://chucs.github.io/flutter-030-application-icon">[Day30] Flutter - Flutter App Icon (part14)</a></li></ul><h3 id="推薦文章"><a href="#推薦文章" class="headerlink" title="推薦文章"></a>推薦文章</h3><ul><li><a href="https://apiumhub.com/tech-blog-barcelona/introduction-domain-driven-design/">An Introduction to Domain Driven Design and Its Benefits</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10216645">關於 Domain-Driven Design 以及他的魅力</a></li><li><a href="https://youtu.be/8bZh5LMaSmE">RailsConf 2014 - All the Little Things by Sandi Metz</a></li></ul><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>本次專案會頻繁的使用 Bloc 套件請大家熟悉。</p><p>程式碼就跟泥巴球一樣只會越滾越大，乾淨的程式可以降低維護成本。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵身為一個軟體工程師，我們最常見的問題就是變動的需求。而程式碼變更，就會有機會出現不可預期 Bug，有時候已經不是小拇指和食指動一動就可以解決的問題，因此設計模式可以降低程式的債務。本次專案目標就是利用DDD架構一步步帶大家寫出一個點擊小遊戲。&lt;/p&gt;
&lt;p&gt;在這篇中給大家一些基本的概念可以在往後的實作中漸漸熟悉，如果想要更了解這個架構，可以到文章的最下面我放了幾篇推薦的文章還有一個對專案管理有幫助的影片，雖然他是用 Ruby 來講解的。&lt;/p&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 016 - Firebase Authentication &amp; Google Sign-In ( IOS &amp; Android )</title>
    <link href="https://chucs.github.io/flutter-016-authentication/"/>
    <id>https://chucs.github.io/flutter-016-authentication/</id>
    <published>2021-12-31T13:49:32.000Z</published>
    <updated>2021-12-31T14:23:11.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要教大家 Firebase Authentication 和開通 Google 登入，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/triathlon_flutter/tree/master/day16">完整程式碼</a></p></blockquote><span id="more"></span><h3 id="創建一個-Firebase-專案"><a href="#創建一個-Firebase-專案" class="headerlink" title="創建一個 Firebase 專案"></a>創建一個 Firebase 專案</h3><p>取個專案名字下一步到底就可以了，若沒有<code>google analytics</code>就點開選單建造一個，然後一樣下一步到底。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/Q5cC1Vi.png" alt=""></p><h3 id="開啟-Google-登入"><a href="#開啟-Google-登入" class="headerlink" title="開啟 Google 登入"></a>開啟 Google 登入</h3><p>完成專案創就後點擊左邊Authentication，然後把google的登入給啟用。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/myrDyyX.png" alt=""></p><p>儲存後你可以看到google的狀態變成已啟用(綠燈)<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/l89sA0T.png" alt=""></p><h3 id="創建APP"><a href="#創建APP" class="headerlink" title="創建APP"></a>創建APP</h3><p>回到專案總覽，以下會介紹IOS和Andriod的創建方式。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/RMfZ78n.png" alt=""></p><h3 id="Android-設定"><a href="#Android-設定" class="headerlink" title="Android 設定"></a>Android 設定</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/VFM9v3l.png" alt=""></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>下載<code>google-services.json</code>放入<code>android/app</code>。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/AUA7ont.png" alt=""></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>在<code>android/day16_android.iml</code>的<code>dependencies</code>層中加入<code>classpath &#39;com.google.gms:google-services:4.3.10&#39;</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath &#x27;com.android.tools.build:gradle:<span class="number">4.1</span><span class="number">.0</span>&#x27;</span><br><span class="line">    classpath <span class="string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span></span><br><span class="line">    classpath &#x27;com.google.gms:google-services:<span class="number">4.3</span><span class="number">.10</span>&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>android/app/build.gradle</code>加入<code>apply plugin: &#39;com.google.gms.google-services&#39;</code>隨便加在最外層就可以了。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;kotlin-android&#x27;</span></span><br><span class="line">apply <span class="keyword">from</span>: <span class="string">&quot;$flutterRoot/packages/flutter_tools/gradle/flutter.gradle&quot;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;com.google.gms.google-services&#x27;</span></span><br></pre></td></tr></table></figure><p>修改applicationId<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/6P2PXBr.png" alt=""></p><h4 id="第五部"><a href="#第五部" class="headerlink" title="第五部"></a>第五部</h4><p>打開終端機輸入<code>keytool -list -v -alias androiddebugkey -keystore ~/.android/debug.keystore</code>，密碼就打個android然後你會得到SHA1和SHA256。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/pwM2XQv.png" alt=""></p><p>回到firebase點開控制台溜到最下新增指紋，兩個都給他新增上去。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/IWpcLA4.png" alt=""><br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/3xlFDEz.png" alt=""><br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/yfPvMm7.png" alt=""></p><h3 id="IOS-設定"><a href="#IOS-設定" class="headerlink" title="IOS 設定"></a>IOS 設定</h3><h4 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h4><p>輸入IOS ID 和 App 名字就可以。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/ESN5tgl.png" alt=""></p><h4 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h4><p>開啟專案把<code>GoogleService-Info.plist</code>放入<code>ios/Runner</code>，然後345步驟都不重要下一步到底。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/ZA13p6o.png" alt=""></p><p>然後打開XCode右鍵資料夾加入檔案，選擇<code>GoogleService-Info.plist</code>。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/L9waVvZ.png" alt=""></p><h4 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h4><p>打開<code>ios/Runner/Info.plist</code>把<code>GoogleService-Info.plist</code>裡面的<code>REVERSED_CLIENT_ID</code>複製到<code>&lt;string&gt;REVERSED_CLIENT_ID&lt;/string&gt;</code>裡面。</p><figure class="highlight plist"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Google Sign-In section --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLTypes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleTypeRole<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Editor<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- TODO Replace this value: --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Copied from GoogleService-Info.plist key REVERSED_CLIENT_ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>REVERSED_CLIENT_ID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsLocalNetworking<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- End of the Google Sign-In section --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>如果ios有遇到pod的問題請到<code>ios/Podfile</code>把請版本打開，並更新一下<code>pod repo update</code>。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/7odXW9M.png" alt=""></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">google_sign_in:</span> <span class="string">^5.0.5</span></span><br><span class="line">  <span class="attr">firebase_auth:</span> <span class="string">^3.0.1</span></span><br><span class="line">  <span class="attr">firebase_core:</span> <span class="string">^1.4.0</span></span><br></pre></td></tr></table></figure><h3 id="實作登入"><a href="#實作登入" class="headerlink" title="實作登入"></a>實作登入</h3><p>在main裡面做初始化。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line">  <span class="keyword">await</span> Firebase.initializeApp();</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寫一個簡單的登入和登出的Class，來測試有沒有設定成功。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_sign_in/google_sign_in.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:firebase_auth/firebase_auth.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthRepositoryImpl</span> </span>&#123;</span><br><span class="line">  Future&lt;<span class="built_in">bool</span>&gt; signInWithGoogle();</span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; signOut();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthRepository</span> <span class="keyword">implements</span> <span class="title">AuthRepositoryImpl</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> FirebaseAuth _firebaseAuth;</span><br><span class="line">  <span class="keyword">final</span> GoogleSignIn _googleSignIn;</span><br><span class="line"></span><br><span class="line">  AuthRepository()</span><br><span class="line">      : _firebaseAuth = FirebaseAuth.instance,</span><br><span class="line">        _googleSignIn = GoogleSignIn();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="built_in">bool</span>&gt; signInWithGoogle() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> GoogleSignInAccount? googleUser = <span class="keyword">await</span> _googleSignIn.signIn();</span><br><span class="line">    <span class="keyword">if</span> (googleUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> GoogleSignInAuthentication googleAuth =</span><br><span class="line">        <span class="keyword">await</span> googleUser.authentication;</span><br><span class="line">    <span class="keyword">final</span> AuthCredential credential = GoogleAuthProvider.credential(</span><br><span class="line">      accessToken: googleAuth.accessToken,</span><br><span class="line">      idToken: googleAuth.idToken,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">await</span> _firebaseAuth.signInWithCredential(credential);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; signOut() <span class="keyword">async</span> &#123;</span><br><span class="line">    Future.wait([</span><br><span class="line">      _firebaseAuth.signOut(),</span><br><span class="line">      _googleSignIn.signOut(),</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然後在頁面上的按鈕使用登入的函式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> AuthRepository _authRepository = AuthRepository();</span><br><span class="line"></span><br><span class="line">  LoginPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;LOGIN&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Container(</span><br><span class="line">        child: Center(</span><br><span class="line">          child: TextButton(</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">              <span class="keyword">final</span> ok = <span class="keyword">await</span> _authRepository.signInWithGoogle();</span><br><span class="line">              <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                Navigator.pushReplacement(</span><br><span class="line">                  context,</span><br><span class="line">                  MaterialPageRoute(</span><br><span class="line">                    builder: (context) =&gt; HomePage(),</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;SIGN IN&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day16/image/5j0iC5W.gif" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要教大家 Firebase Authentication 和開通 Google 登入，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/triathlon_flutter/tree/master/day16&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 015 - 大海撈針不是辦法 ( Dartz )</title>
    <link href="https://chucs.github.io/flutter-015-dartz/"/>
    <id>https://chucs.github.io/flutter-015-dartz/</id>
    <published>2021-12-31T13:48:06.000Z</published>
    <updated>2021-12-31T14:23:11.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵在原本的try＆catch中我們可以截取大部分的錯誤，但是這僅能告訴我程式崩潰然後就噴一堆錯誤出來，對我來說就好像有人把整個程式丟給我說不能動一樣，因此try＆catch並不能滿足我對程式追求的完美，這就是我要介紹Dartz的原因，它可以幫助你排除掉一些問題。</p><p>本篇教學會延續上一篇<a href="https://ithelp.ithome.com.tw/articles/10259641">[Day14] Flutter - 怎麼串接API ( Http )</a>的程式碼進行修改。</p><blockquote><p><a href="https://github.com/Daviswww/triathlon_flutter/tree/master/day15">完整程式碼</a></p></blockquote><span id="more"></span><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">http:</span> <span class="string">^0.13.3</span></span><br><span class="line">  <span class="attr">dartz:</span> <span class="string">^0.9.2</span></span><br><span class="line">  <span class="attr">equatable:</span> <span class="string">^2.0.3</span></span><br></pre></td></tr></table></figure><h3 id="Folding-Either"><a href="#Folding-Either" class="headerlink" title="Folding Either"></a>Folding Either</h3><p>Either這個型態分成左右兩邊，左邊狀態是<code>錯誤</code>時回傳，右邊則是<code>成功</code>的時候回傳，像是這樣子<code>Either&lt;Failure, User&gt;</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> createUser.post.fold(</span><br><span class="line">  (failure) =&gt; log(<span class="string">&quot;<span class="subst">$failure</span>&quot;</span>),</span><br><span class="line">  (post) =&gt; log(<span class="string">&quot;<span class="subst">$post</span>&quot;</span>),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="修改程式碼"><a href="#修改程式碼" class="headerlink" title="修改程式碼"></a>修改程式碼</h3><p>首先創建一些錯誤時回傳的類別，當遇到錯誤時就會丟出我們指定的訊息。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFailure</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ServiceFailure();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostFailure</span> <span class="keyword">extends</span> <span class="title">ServiceFailure</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> code;</span><br><span class="line">  <span class="keyword">final</span> message;</span><br><span class="line"></span><br><span class="line">  PostFailure(<span class="keyword">this</span>.code, <span class="keyword">this</span>.message);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [code, message];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerException</span> <span class="keyword">extends</span> <span class="title">ServiceFailure</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> message;</span><br><span class="line"></span><br><span class="line">  ServerException(<span class="keyword">this</span>.message);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [message];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到下面回傳有left和right兩種，當我post出去結果沒有創建新的使用者時，就可以馬上知道是程式出問還是我的API出問題。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;Either&lt;ServiceFailure, User&gt;&gt; _createUser(</span><br><span class="line">  <span class="built_in">Uri</span> url,</span><br><span class="line">  User body,</span><br><span class="line">) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> response = <span class="keyword">await</span> client.post(</span><br><span class="line">      url,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      body: body.toJson(),</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (response.statusCode == <span class="number">201</span>) &#123;</span><br><span class="line">      log(</span><br><span class="line">        <span class="string">&quot;<span class="subst">$&#123;response.body&#125;</span>&quot;</span>,</span><br><span class="line">        name: response.statusCode.toString(),</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> right(User.fromJson(response.body));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> left(PostFailure(</span><br><span class="line">        response.statusCode,</span><br><span class="line">        response.body,</span><br><span class="line">      ));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> left(ServerException(e));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>雖然他的功能有很多，但是你想要追求更完美更細節的偵錯導致綁手綁腳，那可就不是件好事了。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵在原本的try＆catch中我們可以截取大部分的錯誤，但是這僅能告訴我程式崩潰然後就噴一堆錯誤出來，對我來說就好像有人把整個程式丟給我說不能動一樣，因此try＆catch並不能滿足我對程式追求的完美，這就是我要介紹Dartz的原因，它可以幫助你排除掉一些問題。&lt;/p&gt;
&lt;p&gt;本篇教學會延續上一篇&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10259641&quot;&gt;[Day14] Flutter - 怎麼串接API ( Http )&lt;/a&gt;的程式碼進行修改。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/triathlon_flutter/tree/master/day15&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 014 - 怎麼串接API ( Http )</title>
    <link href="https://chucs.github.io/flutter-014-http/"/>
    <id>https://chucs.github.io/flutter-014-http/</id>
    <published>2021-12-31T13:47:29.000Z</published>
    <updated>2021-12-31T14:23:11.574Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Ya, 我是魚板伯爵 http 套件可以讓你串接API，你可以利用他來做HTTP請求，是一個很ㄅㄧㄤˋ的工具喔。</p><blockquote><p><a href="https://github.com/Daviswww/triathlon_flutter/tree/master/day14">完整程式碼</a></p></blockquote><span id="more"></span><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">http:</span> <span class="string">^0.13.3</span></span><br></pre></td></tr></table></figure><h3 id="IOS-amp-Android-設定"><a href="#IOS-amp-Android-設定" class="headerlink" title="IOS &amp; Android 設定"></a>IOS &amp; Android 設定</h3><p>你需要打開IOS和Android的設定檔來開啟一些限制。</p><h4 id="IOS檔案"><a href="#IOS檔案" class="headerlink" title="IOS檔案"></a>IOS檔案</h4><p>路徑<code>/ios/Runner/Info.plist</code>。</p><figure class="highlight plist"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppTransportSecurity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAllowsLocalNetworking<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day14/image/3buuZ9L.png" alt=""></p><h4 id="Android檔案"><a href="#Android檔案" class="headerlink" title="Android檔案"></a>Android檔案</h4><p>路徑<code>/android/app/src/main/AndroidManifest.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:usesCleartextTraffic=&quot;true&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day14/image/inexWFm.png" alt=""></p><h3 id="創建一個API"><a href="#創建一個API" class="headerlink" title="創建一個API"></a>創建一個API</h3><p>在這裡我使用<a href="https://github.com/typicode/json-server">JSON Server</a>來當做測試的API，安裝完json-server後你可以修改<code>db.json</code>來編輯你的API格式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ json-server --watch db.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;auth&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;json-server&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;asdasdlmasdmlasklmklmsad&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立資料模型"><a href="#建立資料模型" class="headerlink" title="建立資料模型"></a>建立資料模型</h3><p>不管是傳送還是接收都希望資料的格式是固定的，若為不固定的資料格式可能會導致APP有錯誤。可以利用<a href="https://quicktype.io/">Quicktype</a>來生成我們的API模型(推薦新手)，又或者自己新增一個Class再用快捷鍵(mac: <code>command</code>+<code>.</code> |win: <code>control</code>+<code>.</code>)來生成，不過這個需要自己先定義好。</p><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day14/image/11FPxPz.png" alt=""></p><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day14/image/peH798I.png" alt=""></p><h3 id="API-接口管理"><a href="#API-接口管理" class="headerlink" title="API 接口管理"></a>API 接口管理</h3><p>第一步我們一樣先創建一個API結構，要注意的是Android的模擬器接口是<code>http://10.0.2.2:3000</code>，IOS的接口是<code>localhost:3000</code>，而後面的port可以以自行修改(如果你的Local API Port是500就改500)。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="markdown">Android calls the http://10.0.2.2:3000/auth endpoint.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="markdown">IOS calls the http://localhost:3000/auth endpoint.</span></span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiDataSource</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Create new user.</span></span></span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; createUser(User body);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Get user info id, username, passowrd</span></span></span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; getUser(<span class="built_in">int</span> id);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Update user data</span></span></span><br><span class="line">  Future&lt;<span class="built_in">String</span>&gt; updateUser(<span class="built_in">int</span> id, User body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作API"><a href="#實作API" class="headerlink" title="實作API"></a>實作API</h3><p>先創建一個domain(使用的API)和client(http請求)，然後再對class名稱點擊快捷鍵，生成API框架。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> <span class="keyword">implements</span> <span class="title">ApiDataSource</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> client = http.Client();</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> domain = <span class="string">&quot;http://localhost:3000&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day14/image/zrQksFl.png" alt=""></p><h3 id="Http-常用三種請求"><a href="#Http-常用三種請求" class="headerlink" title="Http 常用三種請求"></a>Http 常用三種請求</h3><p>用這三個請求來實作創建使用者、取得使用者資料和更新使用者資料。</p><ul><li>POST：用於提交指定資源的實體，通常會改變伺服器的狀態(創建新資料)。</li><li>GET：用於請求只應用於取得資料(取得資料)。</li><li>PUT：用於取代指定資料請求(修改已存在資料)。</li></ul><h3 id="實作功能"><a href="#實作功能" class="headerlink" title="實作功能"></a>實作功能</h3><p>我就以POST來做範例，首先使用<code>client.post</code>做POST請求，接著把使用者的資料模型轉成json的格式送出，請求成功後就可以得到response，你可以得到回應的資訊，完成後就可以用按鈕觸發了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; createUser(User body) &#123;</span><br><span class="line">  <span class="keyword">return</span> _createUser(</span><br><span class="line">    <span class="built_in">Uri</span>.parse(<span class="string">&#x27;<span class="subst">$domain</span>/auth&#x27;</span>),</span><br><span class="line">    body,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; _createUser(</span><br><span class="line">  <span class="built_in">Uri</span> url,</span><br><span class="line">  User body,</span><br><span class="line">) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> response = <span class="keyword">await</span> client.post(</span><br><span class="line">      url,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      body: body.toJson(),</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response.body;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> response.body;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> e.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TextButton(</span><br><span class="line">  child: Text(</span><br><span class="line">    <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    style: TextStyle(fontSize: <span class="number">30</span>),</span><br><span class="line">  ),</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    userRepository.createUser(</span><br><span class="line">      User(</span><br><span class="line">        username: <span class="string">&quot;username&quot;</span>,</span><br><span class="line">        password: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Ya, 我是魚板伯爵 http 套件可以讓你串接API，你可以利用他來做HTTP請求，是一個很ㄅㄧㄤˋ的工具喔。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/triathlon_flutter/tree/master/day14&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 013 - 管理程式碼好幫手 ( Bloc )</title>
    <link href="https://chucs.github.io/flutter-013-bloc/"/>
    <id>https://chucs.github.io/flutter-013-bloc/</id>
    <published>2021-12-31T13:46:19.000Z</published>
    <updated>2021-12-31T14:22:17.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi我是魚板伯爵，本次教學會用一個簡單的加一減一的範例來教大家 Bloc 這個套件，當你學會以後程式碼會變得非常乾淨，但是內容可能會有一點難希望大家可以看得懂。</p><blockquote><p><a href="https://github.com/Daviswww/triathlon_flutter/tree/master/day13">完整程式碼</a></p></blockquote><span id="more"></span><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><p>Bloc 可以讓頁面與邏輯分離變得容易管理，你可以想像他是頁面與邏輯的橋樑，讓程式碼可以快速閱讀、易於測試和可重複使用，這就是為什麼我要介紹他的原因，以下是他的套件，如果你是用vscode的同學建議你可以安裝bloc，這個套件可以為你生成基本架構，<code>equatable</code>則是可以簡化程式碼。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">bloc:</span> <span class="string">^7.0.0</span></span><br><span class="line">  <span class="attr">flutter_bloc:</span> <span class="string">^7.0.1</span></span><br><span class="line">  <span class="attr">equatable:</span> <span class="string">^2.0.3</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/gJVxbJL.png" alt=""></p><h3 id="Bloc-的流程"><a href="#Bloc-的流程" class="headerlink" title="Bloc 的流程"></a>Bloc 的流程</h3><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day13/image/bNmf2xz.png" alt=""></p><p>為讓大家更容易理解，可以先把這個套件當成一台販賣機，你對販賣機投了10元(Event)，賣販機檢查你的金額(Bloc)，確認金額10元後螢幕顯示10元(State)，10元的飲料按鈕就會亮燈。</p><h3 id="開始建立-Bloc"><a href="#開始建立-Bloc" class="headerlink" title="開始建立 Bloc"></a>開始建立 Bloc</h3><p>如果有安裝 vscode 的 bloc 套件，只需要點擊右鍵就可以創建一個 Bloc 的基本架構，分別為 Event、State 和Bloc。<br><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day13/image/HvBeWDP.gif" alt=""></p><h3 id="先從-Model-開始做起"><a href="#先從-Model-開始做起" class="headerlink" title="先從 Model 開始做起"></a>先從 Model 開始做起</h3><p>我們的功能主要就只有兩個，第一個是加一，第二個是減一。先創建一個結構來定義我們的函式，我們可以在他上面寫一些說明文件，如果滑鼠移到上面則會說明這個API的用途。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CountRepositoryImp</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">Count model</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">Increment one</span></span></span><br><span class="line">  Future&lt;<span class="built_in">int</span>&gt; add(<span class="built_in">int</span> count);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Count model</span></span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// <span class="markdown">Decrement one</span></span></span><br><span class="line">  Future&lt;<span class="built_in">int</span>&gt; dec(<span class="built_in">int</span> count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day13/image/Fb8K560.png" alt=""></p><h3 id="將API給接上並實作內容"><a href="#將API給接上並實作內容" class="headerlink" title="將API給接上並實作內容"></a>將API給接上並實作內容</h3><p>我們可以在一個Class後面加上implements剛剛創的API，接著對Class的按下快捷鍵(mac:<code>command</code>+<code>.</code>，win:<code>control</code>+<code>.</code>)，就會跳出一個選項來生成我們的函式框架，然後就把我們的功能給實作出來。</p><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day13/image/sDaTg5u.gif" alt=""></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountRepository</span> <span class="keyword">implements</span> <span class="title">CountRepositoryImp</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="built_in">int</span>&gt; add(count) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ++count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;<span class="built_in">int</span>&gt; dec(<span class="built_in">int</span> count) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> --count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用者觸發事件-Event"><a href="#使用者觸發事件-Event" class="headerlink" title="使用者觸發事件 : Event"></a>使用者觸發事件 : Event</h3><p>使用者處發的事件有兩個加一和減一，先在這兩個Event裡面宣告<code>count</code>，讓我們的數字作加減，當<code>count</code>傳進觸發的是加一事件，那他就必須把我的<code>count</code>加一後傳回來給我，toString則是可以讓我們看到事件觸發時傳進去的內容。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">part</span> of <span class="string">&#x27;mybloc_bloc.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyblocEvent</span> <span class="keyword">extends</span> <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyblocEvent();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IncrementEvent</span> <span class="keyword">extends</span> <span class="title">MyblocEvent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> IncrementEvent(<span class="keyword">this</span>.count);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">&#x27;IncrementEvent(count: <span class="subst">$count</span>)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecrementEvent</span> <span class="keyword">extends</span> <span class="title">MyblocEvent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> DecrementEvent(<span class="keyword">this</span>.count);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">&#x27;DecrementEvent(count: <span class="subst">$count</span>)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="回傳狀態：State"><a href="#回傳狀態：State" class="headerlink" title="回傳狀態：State"></a>回傳狀態：State</h3><p>我的狀態分別切成MyblocInitial(初始)、Success(成功)和Failure(失敗)三個狀態，接著在Success裡宣告一個count來將處理完的count傳進來，然後對狀態名稱案下快捷鍵，選擇equatable就會生成<code>@override</code>的三段程式碼，不過我們有安裝equatable這個套件，因此我們可以把他縮短成一段讓我們程式碼更有效率，而這幾段程式碼則是幫我們檢查物件是不是相同，不是的話就可以幫我們做覆蓋的動作。</p><p>未使用：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Success</span> <span class="keyword">extends</span> <span class="title">MyblocState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Success(<span class="keyword">this</span>.count);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">&#x27;Increment success(count: <span class="subst">$count</span>)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">operator</span> ==(<span class="built_in">Object</span> other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (identical(<span class="keyword">this</span>, other)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> other <span class="keyword">is</span> AddSuccess &amp;&amp; other.count == count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> hashCode =&gt; count.hashCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用後：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Success</span> <span class="keyword">extends</span> <span class="title">MyblocState</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> count;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Success(<span class="keyword">this</span>.count);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Object</span>&gt; <span class="keyword">get</span> props =&gt; [count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最重要的橋樑：Bloc-三部曲"><a href="#最重要的橋樑：Bloc-三部曲" class="headerlink" title="最重要的橋樑：Bloc 三部曲"></a>最重要的橋樑：Bloc 三部曲</h3><p>Bloc中可以分成三個，第一個是初始化，第二個是判斷使用者事件，第三個是事件觸發後回傳的狀態，在這裡我們會用到<code>Stream</code>，<code>Stream</code>是用來接收一連串的事件，<code>Stream</code>會監聽目前狀態，若 Stream 有事件，則將告訴監聽器，而其他流程的寫法就以註解的方式來介紹。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:bloc/bloc.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:day13/count_repository.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:equatable/equatable.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;mybloc_event.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;mybloc_state.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyblocBloc</span> <span class="keyword">extends</span> <span class="title">Bloc</span>&lt;<span class="title">MyblocEvent</span>, <span class="title">MyblocState</span>&gt; </span>&#123;</span><br><span class="line">  CountRepository _countRepository;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  MyblocBloc(&#123;<span class="keyword">required</span> CountRepository countRepository&#125;)</span><br><span class="line">      : _countRepository = countRepository,</span><br><span class="line">        <span class="keyword">super</span>(MyblocInitial());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 觸發事件</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Stream&lt;MyblocState&gt; mapEventToState(</span><br><span class="line">    MyblocEvent event,</span><br><span class="line">  ) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="comment">// 當使用者處發加一的事件時</span></span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> IncrementEvent) &#123;</span><br><span class="line">      <span class="comment">// 調用加一的狀態</span></span><br><span class="line">      <span class="keyword">yield</span>* _mapIncrementToState(event.count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 當使用者處發減一的事件時</span></span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> DecrementEvent) &#123;</span><br><span class="line">      <span class="comment">// 調用減一的狀態</span></span><br><span class="line">      <span class="keyword">yield</span>* _mapDecrementToState(event.count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 狀態</span></span><br><span class="line">  Stream&lt;MyblocState&gt; _mapIncrementToState(<span class="built_in">int</span> count) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="comment">// 成功加一的話回傳Success否則Failure</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> _count = <span class="keyword">await</span> _countRepository.add(count);</span><br><span class="line">      <span class="keyword">yield</span> Success(_count);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (_) &#123;</span><br><span class="line">      <span class="keyword">yield</span> Failure();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 狀態</span></span><br><span class="line">  Stream&lt;MyblocState&gt; _mapDecrementToState(<span class="built_in">int</span> count) <span class="keyword">async</span>* &#123;</span><br><span class="line">    <span class="comment">// 成功減一的話回傳Success否則Failure</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> _count = <span class="keyword">await</span> _countRepository.dec(count);</span><br><span class="line">      <span class="keyword">yield</span> Success(_count);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (_) &#123;</span><br><span class="line">      <span class="keyword">yield</span> Failure();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何使用-Bloc"><a href="#如何使用-Bloc" class="headerlink" title="如何使用 Bloc"></a>如何使用 Bloc</h3><p>終於到了最後如何使用，原本想說拆成上下集，但是魚板國王不同意所以只好繼續說下去，不知道大家還有沒有跟上，以下我會介紹Bloc的其中一種用法。</p><h4 id="BlocProvider"><a href="#BlocProvider" class="headerlink" title="BlocProvider"></a>BlocProvider</h4><p><code>BlocProvider</code>負責創建Bloc和一個元件，你將可以使用Bloc所有事件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">final</span> countRepository = CountRepository();</span><br><span class="line">  runApp(</span><br><span class="line">    BlocProvider&lt;MyblocBloc&gt;(</span><br><span class="line">      create: (context) =&gt; MyblocBloc(countRepository: countRepository),</span><br><span class="line">      child: MyApp(),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BlocBuilder"><a href="#BlocBuilder" class="headerlink" title="BlocBuilder"></a>BlocBuilder</h4><p><code>BlocBuilder</code>可以處理構建小部件以回應新狀態。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: BlocBuilder&lt;MyblocBloc, MyblocState&gt;(</span><br><span class="line">        builder: (context, state) &#123;</span><br><span class="line">          log(<span class="string">&quot;<span class="subst">$state</span>&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (state <span class="keyword">is</span> Success) &#123;</span><br><span class="line">            <span class="keyword">return</span> MyHomePage(count: state.count);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// state is Failure</span></span><br><span class="line">            <span class="keyword">return</span> MyHomePage(count: <span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用事件"><a href="#使用事件" class="headerlink" title="使用事件"></a>使用事件</h3><p>我們只需要在按鈕<code>onPressed</code>中寫下觸發的事件就可以了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TextButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    BlocProvider.of&lt;MyblocBloc&gt;(context)</span><br><span class="line">        .add(IncrementEvent(widget._count));</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&quot;Add&quot;</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day13/image/zBFmcBV.gif" alt=""></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>Bloc還有其他的功能，MultiBlocProvider(創建多個Bloc)、BlocListener(聽取狀態但不能改變元件)、MultiBlocListener(聽取多個狀態但不能改變元件)等等…，就讓大家自己摸索一下囉。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi我是魚板伯爵，本次教學會用一個簡單的加一減一的範例來教大家 Bloc 這個套件，當你學會以後程式碼會變得非常乾淨，但是內容可能會有一點難希望大家可以看得懂。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/triathlon_flutter/tree/master/day13&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 012 - 場景路徑與轉換 ( Auto Router )</title>
    <link href="https://chucs.github.io/flutter-012-auto-router/"/>
    <id>https://chucs.github.io/flutter-012-auto-router/</id>
    <published>2021-12-31T13:45:40.000Z</published>
    <updated>2021-12-31T14:22:15.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要教大家 Auto Router 這個套件，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。</p><blockquote><p><a href="https://github.com/Daviswww/triathlon_flutter/tree/master/day12">完整程式碼</a></p></blockquote><p>有時候App需要切換很多個頁面，或者太多頁面的路徑常常很難找出錯誤，我們可以使用Autorouter來幫助我們簡化程式碼，如果有哪個路徑不對，只需要檢查我們設定的參數是否有錯誤就可以了。</p><span id="more"></span><h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><p>auto_route為我們這次主要的套件，而<code>auto_route_generator</code>與<code>build_runner</code>是為了可以生成我們路由的套件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">auto_route:</span> <span class="string">^2.3.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_test:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">build_runner:</span></span><br><span class="line">  <span class="attr">auto_route_generator:</span> <span class="string">^2.1.0</span></span><br></pre></td></tr></table></figure><h3 id="AutoRouter-常用屬性"><a href="#AutoRouter-常用屬性" class="headerlink" title="AutoRouter 常用屬性"></a>AutoRouter 常用屬性</h3><p>完成以下的的路由設定後，在終端機(Terminal)上執行<code>flutter pub run build_runner watch --delete-conflicting-outputs</code>指令就會生成出<code>router.gr.dart</code>的檔案。</p><ul><li><code>initial</code>：預設路徑</li><li><code>page</code>：頁面</li><li><code>path</code>：自訂路徑</li><li><code>children</code>：子路徑</li></ul><p>router.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:auto_route/auto_route.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:day12/demo.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:day12/transitions.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flutter pub run build_runner watch --delete-conflicting-outputs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MaterialAutoRouter</span>(</span><br><span class="line">  replaceInRouteName: <span class="string">&#x27;Page,Route&#x27;</span>,</span><br><span class="line">  routes: &lt;AutoRoute&gt;[</span><br><span class="line">    AutoRoute(path: <span class="string">&#x27;/&#x27;</span>, page: LoginScreen, initial: <span class="keyword">true</span>),</span><br><span class="line">    AutoRoute(path: <span class="string">&#x27;/home-screen&#x27;</span>, page: HomeScreen),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> $<span class="title">AppRouter</span> </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="主界面初始化路由"><a href="#主界面初始化路由" class="headerlink" title="主界面初始化路由"></a>主界面初始化路由</h3><p>main.dart</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:day12/demo.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:day12/router.gr.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">final</span> AppRouter appRouter = AppRouter();</span><br><span class="line">  runApp(</span><br><span class="line">    MyApp(</span><br><span class="line">      appRouter: appRouter,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> AppRouter _appRouter;</span><br><span class="line"></span><br><span class="line">  MyApp(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> AppRouter appRouter,</span><br><span class="line">  &#125;)  : _appRouter = appRouter,</span><br><span class="line">        <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp.router(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      routerDelegate: _appRouter.delegate(),</span><br><span class="line">      routeInformationParser: _appRouter.defaultRouteParser(),</span><br><span class="line">      builder: (context, router) =&gt; router!,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何轉場"><a href="#如何轉場" class="headerlink" title="如何轉場"></a>如何轉場</h3><p>首先所有的場景都會在Stack裡，利用<code>replace</code>、<code>navigate</code>、<code>push</code>和<code>pop</code>，來控制所有頁面的進出。若後面有加上Named的元件則代表使用自己所定義的path來控制路由。</p><ul><li><code>replace</code>：覆蓋原本的頁面</li><li><code>navigate</code>：如果沒在stack就加入</li><li><code>push</code>：加入一個新的介面在stack</li><li><code>pop</code>：退出stack</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LoginScreen(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;LoginScreen&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      backgroundColor: Colors.indigo[<span class="number">50</span>],</span><br><span class="line">      body: Center(</span><br><span class="line">        child: TextButton(</span><br><span class="line">          child: Text(<span class="string">&quot;Sign in&quot;</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            <span class="comment">// 轉場</span></span><br><span class="line">            AutoRouter.of(context).replaceNamed(<span class="string">&quot;/home-screen&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day12/image/vxfvUyN.gif" alt=""></p><h3 id="CustomRoute-使用其他的轉場動畫"><a href="#CustomRoute-使用其他的轉場動畫" class="headerlink" title="CustomRoute 使用其他的轉場動畫"></a>CustomRoute 使用其他的轉場動畫</h3><ul><li><code>transitionsBuilder</code>：轉場動畫設定</li><li><code>durationInMilliseconds</code>：轉場動畫時間</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MaterialAutoRouter</span>(</span><br><span class="line">  replaceInRouteName: <span class="string">&#x27;Page,Route&#x27;</span>,</span><br><span class="line">  routes: &lt;AutoRoute&gt;[</span><br><span class="line">    AutoRoute(path: <span class="string">&#x27;/&#x27;</span>, page: LoginScreen, initial: <span class="keyword">true</span>),</span><br><span class="line">    AutoRoute(path: <span class="string">&#x27;/home-screen&#x27;</span>, page: HomeScreen),</span><br><span class="line">    CustomRoute(</span><br><span class="line">      path: <span class="string">&#x27;/menu-screen&#x27;</span>,</span><br><span class="line">      page: MenuScreen,</span><br><span class="line">      transitionsBuilder: TransitionsBuilders.fadeIn,</span><br><span class="line">      durationInMilliseconds: <span class="number">1000</span>,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> $<span class="title">AppRouter</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day12/image/VUEcNnv.gif" alt=""></p><h3 id="使用自己的轉場動畫"><a href="#使用自己的轉場動畫" class="headerlink" title="使用自己的轉場動畫"></a>使用自己的轉場動畫</h3><p>我們可以用<code>transitionsBuilder</code>來寫自己的轉場動畫，至於如何控制就交給大家自己摸索了，以下就寫一個簡單的範例給大家參考。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MaterialAutoRouter</span>(</span><br><span class="line">  replaceInRouteName: <span class="string">&#x27;Page,Route&#x27;</span>,</span><br><span class="line">  routes: &lt;AutoRoute&gt;[</span><br><span class="line">    AutoRoute(path: <span class="string">&#x27;/&#x27;</span>, page: LoginScreen, initial: <span class="keyword">true</span>),</span><br><span class="line">    AutoRoute(path: <span class="string">&#x27;/home-screen&#x27;</span>, page: HomeScreen),</span><br><span class="line">    CustomRoute(</span><br><span class="line">      path: <span class="string">&#x27;/menu-screen&#x27;</span>,</span><br><span class="line">      page: MenuScreen,</span><br><span class="line">      transitionsBuilder: MyTransitions.slideBottomToTop,</span><br><span class="line">      durationInMilliseconds: <span class="number">1000</span>,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> $<span class="title">AppRouter</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTransitions</span> <span class="keyword">extends</span> <span class="title">TransitionsBuilders</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> RouteTransitionsBuilder slideBottomToTop = _slideBottomToTop;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Widget _slideBottomToTop(</span><br><span class="line">    BuildContext context,</span><br><span class="line">    Animation&lt;<span class="built_in">double</span>&gt; animation,</span><br><span class="line">    Animation&lt;<span class="built_in">double</span>&gt; secondaryAnimation,</span><br><span class="line">    Widget child,</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> SlideTransition(</span><br><span class="line">      position: Tween&lt;Offset&gt;(</span><br><span class="line">        begin: <span class="keyword">const</span> Offset(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">        end: Offset.zero,</span><br><span class="line">      ).animate(animation),</span><br><span class="line">      child: child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day12/image/Rz1I1US.gif" alt=""></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>由於是Gif的緣故可能有點卡頓的感覺。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要教大家 Auto Router 這個套件，教學內容只會擷取片段程式碼，建議大家搭配完整程式碼來練習。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/triathlon_flutter/tree/master/day12&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有時候App需要切換很多個頁面，或者太多頁面的路徑常常很難找出錯誤，我們可以使用Autorouter來幫助我們簡化程式碼，如果有哪個路徑不對，只需要檢查我們設定的參數是否有錯誤就可以了。&lt;/p&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 011 - StatelessWidget &amp; StatfulWidget 差別</title>
    <link href="https://chucs.github.io/flutter-011-widget/"/>
    <id>https://chucs.github.io/flutter-011-widget/</id>
    <published>2021-12-31T13:44:50.000Z</published>
    <updated>2021-12-31T14:23:11.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Hi, 我是魚板伯爵今天要講 <code>StatelessWidget</code> &amp; <code>StatfulWidget</code>差別，讓大家可以對這兩種部件有一點概念。</p><blockquote><p><a href="https://github.com/Daviswww/triathlon_flutter/tree/master/day11">完整程式碼</a></p></blockquote><span id="more"></span><h3 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h3><p><code>StatelessWidget</code> 的意思是沒有狀態的 widget，也就是說不能改變內容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class DemoStateless extends StatelessWidget &#123;</span><br><span class="line">  const DemoStateless(&#123; Key? key &#125;) : super(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="StatfulWidget"><a href="#StatfulWidget" class="headerlink" title="StatfulWidget"></a>StatfulWidget</h3><p><code>StatefulWidget</code>的<code>createState</code>將可變的狀態存放在裡面，以app點擊畫面當作範例，可以搭配<code>setState</code>來標記要更新的UI，當下次build的時候就會重新刷新。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class DemoStatful extends StatefulWidget &#123;</span><br><span class="line">  const DemoStatful(&#123;Key? key&#125;) : super(key: key);</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  _DemoStatfulState createState() =&gt; _DemoStatfulState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class _DemoStatfulState extends State&lt;DemoStatful&gt; &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>創建一個專案時的範例就使用<code>StatfulWidget</code>來更新數字的。</p><p><img src="https://raw.githubusercontent.com/Daviswww/triathlon_flutter/master/day11/image/Hksssbd.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Hi, 我是魚板伯爵今天要講 &lt;code&gt;StatelessWidget&lt;/code&gt; &amp;amp; &lt;code&gt;StatfulWidget&lt;/code&gt;差別，讓大家可以對這兩種部件有一點概念。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Daviswww/triathlon_flutter/tree/master/day11&quot;&gt;完整程式碼&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Flutter tutorials" scheme="https://chucs.github.io/categories/Flutter-tutorials/"/>
    
    
    <category term="flutter" scheme="https://chucs.github.io/tags/flutter/"/>
    
  </entry>
  
</feed>
